versions pytest-8.4.0, python-3.11.7.final.0
invocation_dir=C:\Users\zamor\UltiBotInversiones
cwd=C:\Users\zamor\UltiBotInversiones
args=('--debug', '-k', 'tests/unit/services/test_trading_mode_state.py')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x000001F986AED450>
    pytest_plugin_registered [hook]
        plugin: <Session  exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        plugin_name: session
        manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x000001F986AED450>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001F98AE549D0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001F98AE54A10>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
          plugin_name: 2171215984080
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001F986AED450>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\anyio\\pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'langsmith.pytest_plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\langsmith\\pytest_plugin.py'>
          plugin_name: langsmith_plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_asyncio\\plugin.py'>
          plugin_name: asyncio
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_cov\\plugin.py'>
          plugin_name: pytest_cov
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_mock\\__init__.py'>
          plugin_name: pytest_mock
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=6 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001F98AE24AD0>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001F98AE40B10>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=4 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\conftest.py'>
          plugin_name: C:\Users\zamor\UltiBotInversiones\tests\conftest.py
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001F98AE549D0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001F98AE54A10>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001F98AE56F10>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001F98AE4E510>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
          plugin_name: 2171215984080
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001F986AED450>
          plugin_name: pytestconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\mark\\__init__.py'>
          plugin_name: mark
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\main.py'>
          plugin_name: main
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\runner.py'>
          plugin_name: runner
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\fixtures.py'>
          plugin_name: fixtures
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\helpconfig.py'>
          plugin_name: helpconfig
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\python.py'>
          plugin_name: python
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\terminal.py'>
          plugin_name: terminal
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\debugging.py'>
          plugin_name: debugging
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\unittest.py'>
          plugin_name: unittest
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\capture.py'>
          plugin_name: capture
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\skipping.py'>
          plugin_name: skipping
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\legacypath.py'>
          plugin_name: legacypath
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\tmpdir.py'>
          plugin_name: tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\monkeypatch.py'>
          plugin_name: monkeypatch
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\recwarn.py'>
          plugin_name: recwarn
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\pastebin.py'>
          plugin_name: pastebin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          plugin_name: assertion
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\junitxml.py'>
          plugin_name: junitxml
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\doctest.py'>
          plugin_name: doctest
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\cacheprovider.py'>
          plugin_name: cacheprovider
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\freeze_support.py'>
          plugin_name: freeze_support
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\setuponly.py'>
          plugin_name: setuponly
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\setupplan.py'>
          plugin_name: setupplan
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\stepwise.py'>
          plugin_name: stepwise
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\unraisableexception.py'>
          plugin_name: unraisableexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\threadexception.py'>
          plugin_name: threadexception
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\warnings.py'>
          plugin_name: warnings
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\logging.py'>
          plugin_name: logging
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\reports.py'>
          plugin_name: reports
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\faulthandler.py'>
          plugin_name: faulthandler
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'anyio.pytest_plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\anyio\\pytest_plugin.py'>
          plugin_name: anyio
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'langsmith.pytest_plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\langsmith\\pytest_plugin.py'>
          plugin_name: langsmith_plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_asyncio.plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_asyncio\\plugin.py'>
          plugin_name: asyncio
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_cov\\plugin.py'>
          plugin_name: pytest_cov
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_mock' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_mock\\__init__.py'>
          plugin_name: pytest_mock
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='fd' _global_capturing=<MultiCapture out=<FDCapture 1 oldfd=6 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001F98AE24AD0>' mode='r+' encoding='utf-8'>> err=<FDCapture 2 oldfd=8 _state='suspended' tmpfile=<_io.TextIOWrapper name='<tempfile._TemporaryFileWrapper object at 0x000001F98AE40B10>' mode='r+' encoding='utf-8'>> in_=<FDCapture 0 oldfd=4 _state='started' tmpfile=<_io.TextIOWrapper name='nul' mode='r' encoding='utf-8'>> _state='suspended' _in_suspended=False> _capture_fixture=None>
          plugin_name: capturemanager
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'conftest' from 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\conftest.py'>
          plugin_name: C:\Users\zamor\UltiBotInversiones\tests\conftest.py
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          plugin_name: session
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001F98AE549D0>
          plugin_name: lfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001F98AE54A10>
          plugin_name: nfplugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          plugin_name: legacypath-tmpdir
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001F98AE56F10>
          plugin_name: terminalreporter
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001F98AE4E510>
          plugin_name: logging-plugin
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000001F98AE9D450>
          plugin_name: funcmanage
          manager: <_pytest.config.PytestPluginManager object at 0x000001F9868EB5D0>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x000001F986AED450>
          start_path: C:\Users\zamor\UltiBotInversiones
          startdir: C:\Users\zamor\UltiBotInversiones
      finish pytest_report_header --> [['asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function'], ['rootdir: C:\\Users\\zamor\\UltiBotInversiones', 'configfile: pytest.ini', 'testpaths: tests', 'plugins: anyio-4.9.0, langsmith-0.3.45, asyncio-1.0.0, cov-6.2.1, mock-3.14.1'], ['using: pytest-8.4.0', 'registered third-party plugins:', '  anyio-4.9.0 at C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\anyio\\pytest_plugin.py', '  langsmith-0.3.45 at C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\langsmith\\pytest_plugin.py', '  pytest-asyncio-1.0.0 at C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_asyncio\\plugin.py', '  pytest-cov-6.2.1 at C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_cov\\plugin.py', '  pytest-mock-3.14.1 at C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_mock\\__init__.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument CollectionArgument(path=WindowsPath('C:/Users/zamor/UltiBotInversiones/tests'), parts=[], module_name=None) [collection]
            pytest_collect_directory [hook]
                path: C:\Users\zamor\UltiBotInversiones
                parent: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
            finish pytest_collect_directory --> <Dir UltiBotInversiones> [hook]
            pytest_collectstart [hook]
                collector: <Dir UltiBotInversiones>
            finish pytest_collectstart --> [] [hook]
            pytest_make_collect_report [hook]
                collector: <Dir UltiBotInversiones>
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.ai
                  path: C:\Users\zamor\UltiBotInversiones\.ai
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.clinerules
                  path: C:\Users\zamor\UltiBotInversiones\.clinerules
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.dockerignore
                  path: C:\Users\zamor\UltiBotInversiones\.dockerignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\.dockerignore
                  path: C:\Users\zamor\UltiBotInversiones\.dockerignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.env
                  path: C:\Users\zamor\UltiBotInversiones\.env
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\.env
                  path: C:\Users\zamor\UltiBotInversiones\.env
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.env.example
                  path: C:\Users\zamor\UltiBotInversiones\.env.example
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\.env.example
                  path: C:\Users\zamor\UltiBotInversiones\.env.example
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.git
                  path: C:\Users\zamor\UltiBotInversiones\.git
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.gitignore
                  path: C:\Users\zamor\UltiBotInversiones\.gitignore
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\.gitignore
                  path: C:\Users\zamor\UltiBotInversiones\.gitignore
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.pre-commit-config.yaml
                  path: C:\Users\zamor\UltiBotInversiones\.pre-commit-config.yaml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\.pre-commit-config.yaml
                  path: C:\Users\zamor\UltiBotInversiones\.pre-commit-config.yaml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.pylintrc
                  path: C:\Users\zamor\UltiBotInversiones\.pylintrc
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\.pylintrc
                  path: C:\Users\zamor\UltiBotInversiones\.pylintrc
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.pytest_cache
                  path: C:\Users\zamor\UltiBotInversiones\.pytest_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.ruff_cache
                  path: C:\Users\zamor\UltiBotInversiones\.ruff_cache
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.venv
                  path: C:\Users\zamor\UltiBotInversiones\.venv
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\.vscode
                  path: C:\Users\zamor\UltiBotInversiones\.vscode
              finish pytest_ignore_collect --> True [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\API_Keys.txt
                  path: C:\Users\zamor\UltiBotInversiones\API_Keys.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\API_Keys.txt
                  path: C:\Users\zamor\UltiBotInversiones\API_Keys.txt
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\AUDIT_REPORT.md
                  path: C:\Users\zamor\UltiBotInversiones\AUDIT_REPORT.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\AUDIT_REPORT.md
                  path: C:\Users\zamor\UltiBotInversiones\AUDIT_REPORT.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\AUDIT_TASK_JULES.md
                  path: C:\Users\zamor\UltiBotInversiones\AUDIT_TASK_JULES.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\AUDIT_TASK_JULES.md
                  path: C:\Users\zamor\UltiBotInversiones\AUDIT_TASK_JULES.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\Dockerfile
                  path: C:\Users\zamor\UltiBotInversiones\Dockerfile
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\Dockerfile
                  path: C:\Users\zamor\UltiBotInversiones\Dockerfile
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\Dockerfile.frontend
                  path: C:\Users\zamor\UltiBotInversiones\Dockerfile.frontend
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\Dockerfile.frontend
                  path: C:\Users\zamor\UltiBotInversiones\Dockerfile.frontend
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\PLAN_RESOLUCION_TESTS.md
                  path: C:\Users\zamor\UltiBotInversiones\PLAN_RESOLUCION_TESTS.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\PLAN_RESOLUCION_TESTS.md
                  path: C:\Users\zamor\UltiBotInversiones\PLAN_RESOLUCION_TESTS.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\PM_CHECKLIST.md
                  path: C:\Users\zamor\UltiBotInversiones\PM_CHECKLIST.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\PM_CHECKLIST.md
                  path: C:\Users\zamor\UltiBotInversiones\PM_CHECKLIST.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\README.md
                  path: C:\Users\zamor\UltiBotInversiones\README.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\README.md
                  path: C:\Users\zamor\UltiBotInversiones\README.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\SRST_PROGRESS.md
                  path: C:\Users\zamor\UltiBotInversiones\SRST_PROGRESS.md
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\SRST_PROGRESS.md
                  path: C:\Users\zamor\UltiBotInversiones\SRST_PROGRESS.md
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\SRST_TICKETS
                  path: C:\Users\zamor\UltiBotInversiones\SRST_TICKETS
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\SRST_TICKETS
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir SRST_TICKETS> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\UI_ejemplos
                  path: C:\Users\zamor\UltiBotInversiones\UI_ejemplos
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\UI_ejemplos
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir UI_ejemplos> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\bmad-agent
                  path: C:\Users\zamor\UltiBotInversiones\bmad-agent
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\bmad-agent
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir bmad-agent> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\docker
                  path: C:\Users\zamor\UltiBotInversiones\docker
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\docker
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir docker> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\docker-compose.yml
                  path: C:\Users\zamor\UltiBotInversiones\docker-compose.yml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\docker-compose.yml
                  path: C:\Users\zamor\UltiBotInversiones\docker-compose.yml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\docs
                  path: C:\Users\zamor\UltiBotInversiones\docs
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\docs
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir docs> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\logs
                  path: C:\Users\zamor\UltiBotInversiones\logs
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\logs
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir logs> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\mcp_server_ccxt
                  path: C:\Users\zamor\UltiBotInversiones\mcp_server_ccxt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\mcp_server_ccxt
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir mcp_server_ccxt> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\mcp_service
                  path: C:\Users\zamor\UltiBotInversiones\mcp_service
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\mcp_service
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir mcp_service> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\mcp_urls.txt
                  path: C:\Users\zamor\UltiBotInversiones\mcp_urls.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\mcp_urls.txt
                  path: C:\Users\zamor\UltiBotInversiones\mcp_urls.txt
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\poetry.lock
                  path: C:\Users\zamor\UltiBotInversiones\poetry.lock
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\poetry.lock
                  path: C:\Users\zamor\UltiBotInversiones\poetry.lock
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\pyproject.toml
                  path: C:\Users\zamor\UltiBotInversiones\pyproject.toml
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\pyproject.toml
                  path: C:\Users\zamor\UltiBotInversiones\pyproject.toml
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\pytest.ini
                  path: C:\Users\zamor\UltiBotInversiones\pytest.ini
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\pytest.ini
                  path: C:\Users\zamor\UltiBotInversiones\pytest.ini
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\pytest_debug_output.txt
                  path: C:\Users\zamor\UltiBotInversiones\pytest_debug_output.txt
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\pytest_debug_output.txt
                  path: C:\Users\zamor\UltiBotInversiones\pytest_debug_output.txt
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\pytestdebug.log
                  path: C:\Users\zamor\UltiBotInversiones\pytestdebug.log
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\pytestdebug.log
                  path: C:\Users\zamor\UltiBotInversiones\pytestdebug.log
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\run.py
                  path: C:\Users\zamor\UltiBotInversiones\run.py
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\run.py
                  path: C:\Users\zamor\UltiBotInversiones\run.py
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\run_frontend_with_backend.bat
                  path: C:\Users\zamor\UltiBotInversiones\run_frontend_with_backend.bat
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_file [hook]
                  parent: <Dir UltiBotInversiones>
                  file_path: C:\Users\zamor\UltiBotInversiones\run_frontend_with_backend.bat
                  path: C:\Users\zamor\UltiBotInversiones\run_frontend_with_backend.bat
              finish pytest_collect_file --> [] [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\scripts
                  path: C:\Users\zamor\UltiBotInversiones\scripts
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\scripts
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir scripts> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\src
                  path: C:\Users\zamor\UltiBotInversiones\src
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\src
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Package src> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\supabase
                  path: C:\Users\zamor\UltiBotInversiones\supabase
              finish pytest_ignore_collect --> None [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\supabase
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir supabase> [hook]
              pytest_collect_directory [hook]
                  path: C:\Users\zamor\UltiBotInversiones\tests
                  parent: <Dir UltiBotInversiones>
              finish pytest_collect_directory --> <Dir tests> [hook]
              pytest_ignore_collect [hook]
                  config: <_pytest.config.Config object at 0x000001F986AED450>
                  collection_path: C:\Users\zamor\UltiBotInversiones\venv
                  path: C:\Users\zamor\UltiBotInversiones\venv
              finish pytest_ignore_collect --> True [hook]
            finish pytest_make_collect_report --> <CollectReport '.' lenresult=12 outcome='passed'> [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Dir tests> [collection]
      pytest_collectstart [hook]
          collector: <Dir tests>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir tests>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\conftest.py
            path: C:\Users\zamor\UltiBotInversiones\tests\conftest.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir tests>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\conftest.py
            path: C:\Users\zamor\UltiBotInversiones\tests\conftest.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\e2e
            path: C:\Users\zamor\UltiBotInversiones\tests\e2e
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\e2e
            parent: <Dir tests>
        finish pytest_collect_directory --> <Dir e2e> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration
            path: C:\Users\zamor\UltiBotInversiones\tests\integration
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\integration
            parent: <Dir tests>
        finish pytest_collect_directory --> <Dir integration> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\run_story_4_4_tests.py
            path: C:\Users\zamor\UltiBotInversiones\tests\run_story_4_4_tests.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir tests>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\run_story_4_4_tests.py
            path: C:\Users\zamor\UltiBotInversiones\tests\run_story_4_4_tests.py
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\system
            path: C:\Users\zamor\UltiBotInversiones\tests\system
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\system
            parent: <Dir tests>
        finish pytest_collect_directory --> <Dir system> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\ui
            path: C:\Users\zamor\UltiBotInversiones\tests\ui
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\ui
            parent: <Dir tests>
        finish pytest_collect_directory --> <Dir ui> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit
            path: C:\Users\zamor\UltiBotInversiones\tests\unit
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit
            parent: <Dir tests>
        finish pytest_collect_directory --> <Dir unit> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests' lenresult=5 outcome='passed'> [hook]
    genitems <Dir e2e> [collection]
      pytest_collectstart [hook]
          collector: <Dir e2e>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir e2e>
      finish pytest_make_collect_report --> <CollectReport 'tests/e2e' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/e2e' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir integration> [collection]
      pytest_collectstart [hook]
          collector: <Dir integration>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir integration>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api
            parent: <Dir integration>
        finish pytest_collect_directory --> <Dir api> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\fixtures
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\fixtures
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\fixtures
            parent: <Dir integration>
        finish pytest_collect_directory --> <Dir fixtures> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir integration>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir integration>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py
          finish pytest_pycollect_makemodule --> <Module test_story_4_5_trading_mode_integration.py> [hook]
        finish pytest_collect_file --> [<Module test_story_4_5_trading_mode_integration.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir integration>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir integration>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py
          finish pytest_pycollect_makemodule --> <Module test_story_5_4_complete_flow.py> [hook]
        finish pytest_collect_file --> [<Module test_story_5_4_complete_flow.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir integration>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir integration>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py
          finish pytest_pycollect_makemodule --> <Module test_strategy_ai_trading_flow.py> [hook]
        finish pytest_collect_file --> [<Module test_strategy_ai_trading_flow.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration' lenresult=5 outcome='passed'> [hook]
    genitems <Dir api> [collection]
      pytest_collectstart [hook]
          collector: <Dir api>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir api>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1
            parent: <Dir api>
        finish pytest_collect_directory --> <Dir v1> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api' lenresult=1 outcome='passed'> [hook]
    genitems <Dir v1> [collection]
      pytest_collectstart [hook]
          collector: <Dir v1>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir v1>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints
            parent: <Dir v1>
        finish pytest_collect_directory --> <Dir endpoints> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir v1>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir v1>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py
          finish pytest_pycollect_makemodule --> <Module test_config_endpoints.py> [hook]
        finish pytest_collect_file --> [<Module test_config_endpoints.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir v1>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir v1>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py
          finish pytest_pycollect_makemodule --> <Module test_real_trading_flow.py> [hook]
        finish pytest_collect_file --> [<Module test_real_trading_flow.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir v1>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir v1>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py
          finish pytest_pycollect_makemodule --> <Module test_reports_endpoints.py> [hook]
        finish pytest_collect_file --> [<Module test_reports_endpoints.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api/v1' lenresult=4 outcome='passed'> [hook]
    genitems <Dir endpoints> [collection]
      pytest_collectstart [hook]
          collector: <Dir endpoints>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir endpoints>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir endpoints>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir endpoints>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py
              path: C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py
          finish pytest_pycollect_makemodule --> <Module test_performance_endpoints.py> [hook]
        finish pytest_collect_file --> [<Module test_performance_endpoints.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api/v1/endpoints' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_performance_endpoints.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_performance_endpoints.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_performance_endpoints.py>
      find_module called for: test_performance_endpoints [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\api\\v1\\endpoints\\test_performance_endpoints.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\endpoints\test_performance_endpoints.py [assertion]
      early skip of rewriting module: fastapi [assertion]
      early skip of rewriting module: starlette [assertion]
      early skip of rewriting module: starlette.status [assertion]
      early skip of rewriting module: fastapi.applications [assertion]
      early skip of rewriting module: fastapi.routing [assertion]
      early skip of rewriting module: fastapi.params [assertion]
      early skip of rewriting module: fastapi.openapi [assertion]
      early skip of rewriting module: fastapi.openapi.models [assertion]
      early skip of rewriting module: fastapi._compat [assertion]
      early skip of rewriting module: fastapi.exceptions [assertion]
      early skip of rewriting module: pydantic.main [assertion]
      early skip of rewriting module: pydantic.warnings [assertion]
      early skip of rewriting module: pydantic._internal._config [assertion]
      early skip of rewriting module: pydantic.aliases [assertion]
      early skip of rewriting module: pydantic._internal._internal_dataclass [assertion]
      early skip of rewriting module: pydantic.config [assertion]
      early skip of rewriting module: pydantic._internal._decorators [assertion]
      early skip of rewriting module: pydantic._internal._core_utils [assertion]
      early skip of rewriting module: pydantic._internal._utils [assertion]
      early skip of rewriting module: pydantic._internal._import_utils [assertion]
      early skip of rewriting module: pydantic._internal._fields [assertion]
      early skip of rewriting module: pydantic._internal._generics [assertion]
      early skip of rewriting module: pydantic._internal._forward_ref [assertion]
      early skip of rewriting module: pydantic._internal._docs_extraction [assertion]
      early skip of rewriting module: pydantic._internal._mock_val_ser [assertion]
      early skip of rewriting module: pydantic.plugin [assertion]
      early skip of rewriting module: pydantic.plugin._schema_validator [assertion]
      early skip of rewriting module: pydantic._internal._model_construction [assertion]
      early skip of rewriting module: pydantic._internal._generate_schema [assertion]
      early skip of rewriting module: pydantic.annotated_handlers [assertion]
      early skip of rewriting module: pydantic.functional_validators [assertion]
      early skip of rewriting module: pydantic.json_schema [assertion]
      early skip of rewriting module: pydantic._internal._core_metadata [assertion]
      early skip of rewriting module: pydantic._internal._schema_generation_shared [assertion]
      early skip of rewriting module: pydantic._internal._discriminated_union [assertion]
      early skip of rewriting module: pydantic._internal._known_annotated_metadata [assertion]
      early skip of rewriting module: pydantic._internal._schema_gather [assertion]
      early skip of rewriting module: pydantic._internal._signature [assertion]
      early skip of rewriting module: starlette.exceptions [assertion]
      early skip of rewriting module: pydantic.fields [assertion]
      early skip of rewriting module: annotated_types [assertion]
      early skip of rewriting module: pydantic._internal._validators [assertion]
      early skip of rewriting module: pydantic.types [assertion]
      early skip of rewriting module: pydantic.plugin._loader [assertion]
      early skip of rewriting module: fastapi.types [assertion]
      early skip of rewriting module: starlette.datastructures [assertion]
      early skip of rewriting module: starlette.concurrency [assertion]
      early skip of rewriting module: starlette.types [assertion]
      early skip of rewriting module: pydantic.type_adapter [assertion]
      early skip of rewriting module: fastapi.logger [assertion]
      early skip of rewriting module: pydantic.networks [assertion]
      early skip of rewriting module: email_validator [assertion]
      early skip of rewriting module: email_validator.exceptions_types [assertion]
      early skip of rewriting module: email_validator.validate_email [assertion]
      early skip of rewriting module: email_validator.syntax [assertion]
      early skip of rewriting module: email_validator.rfc_constants [assertion]
      early skip of rewriting module: email_validator.version [assertion]
      early skip of rewriting module: fastapi.datastructures [assertion]
      early skip of rewriting module: fastapi.dependencies [assertion]
      early skip of rewriting module: fastapi.dependencies.models [assertion]
      early skip of rewriting module: fastapi.security [assertion]
      early skip of rewriting module: fastapi.security.api_key [assertion]
      early skip of rewriting module: fastapi.security.base [assertion]
      early skip of rewriting module: starlette.requests [assertion]
      early skip of rewriting module: starlette._utils [assertion]
      early skip of rewriting module: starlette.formparsers [assertion]
      early skip of rewriting module: multipart [assertion]
      early skip of rewriting module: python_multipart [assertion]
      early skip of rewriting module: python_multipart.multipart [assertion]
      early skip of rewriting module: python_multipart.decoders [assertion]
      early skip of rewriting module: python_multipart.exceptions [assertion]
      early skip of rewriting module: multipart.multipart [assertion]
      early skip of rewriting module: fastapi.security.http [assertion]
      early skip of rewriting module: fastapi.security.utils [assertion]
      early skip of rewriting module: fastapi.security.oauth2 [assertion]
      early skip of rewriting module: fastapi.param_functions [assertion]
      early skip of rewriting module: fastapi.security.open_id_connect_url [assertion]
      early skip of rewriting module: fastapi.dependencies.utils [assertion]
      early skip of rewriting module: fastapi.background [assertion]
      early skip of rewriting module: starlette.background [assertion]
      early skip of rewriting module: fastapi.concurrency [assertion]
      early skip of rewriting module: fastapi.utils [assertion]
      early skip of rewriting module: starlette.responses [assertion]
      early skip of rewriting module: starlette._compat [assertion]
      early skip of rewriting module: starlette.websockets [assertion]
      early skip of rewriting module: fastapi.encoders [assertion]
      early skip of rewriting module: pydantic.color [assertion]
      early skip of rewriting module: starlette.routing [assertion]
      early skip of rewriting module: starlette._exception_handler [assertion]
      early skip of rewriting module: starlette.convertors [assertion]
      early skip of rewriting module: starlette.middleware [assertion]
      early skip of rewriting module: fastapi.exception_handlers [assertion]
      early skip of rewriting module: fastapi.websockets [assertion]
      early skip of rewriting module: fastapi.openapi.docs [assertion]
      early skip of rewriting module: fastapi.openapi.utils [assertion]
      early skip of rewriting module: fastapi.openapi.constants [assertion]
      early skip of rewriting module: fastapi.responses [assertion]
      early skip of rewriting module: ujson [assertion]
      early skip of rewriting module: starlette.applications [assertion]
      early skip of rewriting module: starlette.middleware.base [assertion]
      early skip of rewriting module: starlette.middleware.errors [assertion]
      early skip of rewriting module: starlette.middleware.exceptions [assertion]
      early skip of rewriting module: fastapi.requests [assertion]
      early skip of rewriting module: fastapi.testclient [assertion]
      early skip of rewriting module: starlette.testclient [assertion]
      early skip of rewriting module: src [assertion]
      early skip of rewriting module: src.ultibot_backend [assertion]
      early skip of rewriting module: src.ultibot_backend.main [assertion]
      early skip of rewriting module: logging.config [assertion]
      early skip of rewriting module: logging.handlers [assertion]
      early skip of rewriting module: socketserver [assertion]
      early skip of rewriting module: fastapi.middleware [assertion]
      early skip of rewriting module: fastapi.middleware.cors [assertion]
      early skip of rewriting module: starlette.middleware.cors [assertion]
      early skip of rewriting module: src.ultibot_backend.api [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1 [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.config [assertion]
      early skip of rewriting module: src.shared [assertion]
      early skip of rewriting module: src.shared.data_types [assertion]
      early skip of rewriting module: src.ultibot_backend.core [assertion]
      early skip of rewriting module: src.ultibot_backend.core.domain_models [assertion]
      early skip of rewriting module: src.ultibot_backend.core.domain_models.trading_strategy_models [assertion]
      early skip of rewriting module: pydantic.deprecated [assertion]
      early skip of rewriting module: pydantic.deprecated.class_validators [assertion]
      early skip of rewriting module: pydantic._internal._decorators_v1 [assertion]
      early skip of rewriting module: src.ultibot_backend.core.domain_models.user_configuration_models [assertion]
      early skip of rewriting module: src.ultibot_backend.core.domain_models.opportunity_models [assertion]
      early skip of rewriting module: src.ultibot_backend.core.domain_models.trade_models [assertion]
      early skip of rewriting module: src.ultibot_backend.services [assertion]
      early skip of rewriting module: src.ultibot_backend.services.config_service [assertion]
      early skip of rewriting module: src.ultibot_backend.adapters [assertion]
      early skip of rewriting module: src.ultibot_backend.adapters.persistence_service [assertion]
      early skip of rewriting module: psycopg [assertion]
      early skip of rewriting module: psycopg.pq [assertion]
      early skip of rewriting module: psycopg.pq.abc [assertion]
      early skip of rewriting module: psycopg.pq._enums [assertion]
      early skip of rewriting module: psycopg._compat [assertion]
      early skip of rewriting module: psycopg.pq.misc [assertion]
      early skip of rewriting module: ctypes.util [assertion]
      early skip of rewriting module: psycopg_c [assertion]
      early skip of rewriting module: psycopg_binary [assertion]
      early skip of rewriting module: psycopg_binary.version [assertion]
      early skip of rewriting module: psycopg_binary.pq [assertion]
      early skip of rewriting module: psycopg.errors [assertion]
      early skip of rewriting module: psycopg._encodings [assertion]
      early skip of rewriting module: psycopg.dbapi20 [assertion]
      early skip of rewriting module: psycopg._oids [assertion]
      early skip of rewriting module: psycopg.abc [assertion]
      early skip of rewriting module: psycopg._enums [assertion]
      early skip of rewriting module: psycopg.types [assertion]
      early skip of rewriting module: psycopg._typeinfo [assertion]
      early skip of rewriting module: psycopg.sql [assertion]
      early skip of rewriting module: psycopg._transformer [assertion]
      early skip of rewriting module: psycopg._cmodule [assertion]
      early skip of rewriting module: psycopg_binary._psycopg [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: psycopg.rows [assertion]
      early skip of rewriting module: psycopg._wrappers [assertion]
      early skip of rewriting module: psycopg._typemod [assertion]
      early skip of rewriting module: psycopg.types.string [assertion]
      early skip of rewriting module: psycopg.adapt [assertion]
      early skip of rewriting module: psycopg._adapters_map [assertion]
      early skip of rewriting module: psycopg.postgres [assertion]
      early skip of rewriting module: psycopg._tpc [assertion]
      early skip of rewriting module: psycopg.copy [assertion]
      early skip of rewriting module: psycopg._copy [assertion]
      early skip of rewriting module: psycopg._acompat [assertion]
      early skip of rewriting module: psycopg._copy_base [assertion]
      early skip of rewriting module: psycopg.generators [assertion]
      early skip of rewriting module: psycopg.waiting [assertion]
      early skip of rewriting module: psycopg._copy_async [assertion]
      early skip of rewriting module: psycopg.cursor [assertion]
      early skip of rewriting module: psycopg._pipeline [assertion]
      early skip of rewriting module: psycopg._capabilities [assertion]
      early skip of rewriting module: psycopg._cursor_base [assertion]
      early skip of rewriting module: psycopg._column [assertion]
      early skip of rewriting module: psycopg._queries [assertion]
      early skip of rewriting module: psycopg._preparing [assertion]
      early skip of rewriting module: psycopg.version [assertion]
      early skip of rewriting module: psycopg.connection [assertion]
      early skip of rewriting module: psycopg.conninfo [assertion]
      early skip of rewriting module: psycopg._conninfo_attempts [assertion]
      early skip of rewriting module: psycopg._conninfo_utils [assertion]
      early skip of rewriting module: psycopg._conninfo_attempts_async [assertion]
      early skip of rewriting module: psycopg.transaction [assertion]
      early skip of rewriting module: psycopg._server_cursor [assertion]
      early skip of rewriting module: psycopg._server_cursor_base [assertion]
      early skip of rewriting module: psycopg._connection_base [assertion]
      early skip of rewriting module: psycopg._connection_info [assertion]
      early skip of rewriting module: psycopg._tz [assertion]
      early skip of rewriting module: psycopg.raw_cursor [assertion]
      early skip of rewriting module: psycopg.cursor_async [assertion]
      early skip of rewriting module: psycopg._server_cursor_async [assertion]
      early skip of rewriting module: psycopg.client_cursor [assertion]
      early skip of rewriting module: psycopg.connection_async [assertion]
      early skip of rewriting module: psycopg.types.range [assertion]
      early skip of rewriting module: psycopg._struct [assertion]
      early skip of rewriting module: psycopg.types.multirange [assertion]
      early skip of rewriting module: psycopg.types.array [assertion]
      early skip of rewriting module: psycopg.types.bool [assertion]
      early skip of rewriting module: psycopg.types.composite [assertion]
      early skip of rewriting module: psycopg.types.datetime [assertion]
      early skip of rewriting module: psycopg.types.enum [assertion]
      early skip of rewriting module: psycopg.types.json [assertion]
      early skip of rewriting module: psycopg.types.net [assertion]
      early skip of rewriting module: psycopg.types.none [assertion]
      early skip of rewriting module: psycopg.types.numeric [assertion]
      early skip of rewriting module: psycopg.types.numpy [assertion]
      early skip of rewriting module: psycopg.types.uuid [assertion]
      early skip of rewriting module: psycopg_pool [assertion]
      early skip of rewriting module: psycopg_pool.pool [assertion]
      early skip of rewriting module: psycopg_pool.abc [assertion]
      early skip of rewriting module: psycopg_pool._compat [assertion]
      early skip of rewriting module: psycopg_pool.base [assertion]
      early skip of rewriting module: psycopg_pool.errors [assertion]
      early skip of rewriting module: psycopg_pool._acompat [assertion]
      early skip of rewriting module: psycopg_pool.sched [assertion]
      early skip of rewriting module: psycopg_pool._task [assertion]
      early skip of rewriting module: psycopg_pool.pool_async [assertion]
      early skip of rewriting module: psycopg_pool.sched_async [assertion]
      early skip of rewriting module: psycopg_pool.null_pool [assertion]
      early skip of rewriting module: psycopg_pool.base_null_pool [assertion]
      early skip of rewriting module: psycopg_pool.null_pool_async [assertion]
      early skip of rewriting module: psycopg_pool.version [assertion]
      early skip of rewriting module: src.ultibot_backend.app_config [assertion]
      early skip of rewriting module: pydantic_settings [assertion]
      early skip of rewriting module: pydantic_settings.exceptions [assertion]
      early skip of rewriting module: pydantic_settings.main [assertion]
      early skip of rewriting module: pydantic.dataclasses [assertion]
      early skip of rewriting module: pydantic._internal._dataclasses [assertion]
      early skip of rewriting module: pydantic_settings.sources [assertion]
      early skip of rewriting module: pydantic_settings.sources.base [assertion]
      early skip of rewriting module: pydantic_settings.utils [assertion]
      early skip of rewriting module: pydantic_settings.sources.types [assertion]
      early skip of rewriting module: pydantic_settings.sources.utils [assertion]
      early skip of rewriting module: pydantic.root_model [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.aws [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.env [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.azure [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.cli [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.dotenv [assertion]
      early skip of rewriting module: dotenv [assertion]
      early skip of rewriting module: dotenv.main [assertion]
      early skip of rewriting module: dotenv.parser [assertion]
      early skip of rewriting module: dotenv.variables [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.gcp [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.json [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.pyproject [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.toml [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.secrets [assertion]
      early skip of rewriting module: pydantic_settings.sources.providers.yaml [assertion]
      early skip of rewriting module: pydantic_settings.version [assertion]
      early skip of rewriting module: src.ultibot_backend.core.exceptions [assertion]
      early skip of rewriting module: src.ultibot_backend.dependencies [assertion]
      early skip of rewriting module: src.ultibot_backend.services.order_execution_service [assertion]
      early skip of rewriting module: src.ultibot_backend.adapters.binance_adapter [assertion]
      early skip of rewriting module: websockets [assertion]
      early skip of rewriting module: websockets.imports [assertion]
      early skip of rewriting module: websockets.version [assertion]
      early skip of rewriting module: src.ultibot_backend.adapters.mobula_adapter [assertion]
      early skip of rewriting module: src.ultibot_backend.services.credential_service [assertion]
      early skip of rewriting module: cryptography [assertion]
      early skip of rewriting module: cryptography.utils [assertion]
      early skip of rewriting module: cryptography.__about__ [assertion]
      early skip of rewriting module: cryptography.fernet [assertion]
      early skip of rewriting module: cryptography.exceptions [assertion]
      early skip of rewriting module: cryptography.hazmat [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings._rust [assertion]
      early skip of rewriting module: _cffi_backend [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.hashes [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.padding [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._cipheralgorithm [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.modes [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.ciphers.algorithms [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers [assertion]
      early skip of rewriting module: cryptography.hazmat.decrepit.ciphers.algorithms [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.hmac [assertion]
      early skip of rewriting module: src.ultibot_backend.services.ai_orchestrator_service [assertion]
      early skip of rewriting module: langchain_google_genai [assertion]
      early skip of rewriting module: langchain_google_genai._enums [assertion]
      early skip of rewriting module: google [assertion]
      early skip of rewriting module: google.ai [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.gapic_version [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.async_client [assertion]
      early skip of rewriting module: google.api_core [assertion]
      early skip of rewriting module: google.api_core.version [assertion]
      early skip of rewriting module: google.api_core.exceptions [assertion]
      early skip of rewriting module: google.rpc [assertion]
      early skip of rewriting module: google.rpc.error_details_pb2 [assertion]
      early skip of rewriting module: google.protobuf [assertion]
      early skip of rewriting module: google.protobuf.descriptor [assertion]
      early skip of rewriting module: google.protobuf.internal [assertion]
      early skip of rewriting module: google.protobuf.internal.api_implementation [assertion]
      early skip of rewriting module: google.protobuf.internal._api_implementation [assertion]
      early skip of rewriting module: google._upb [assertion]
      early skip of rewriting module: google._upb._message [assertion]
      early skip of rewriting module: google.protobuf.message [assertion]
      early skip of rewriting module: google.protobuf.internal.enum_type_wrapper [assertion]
      early skip of rewriting module: google.protobuf.enable_deterministic_proto_serialization [assertion]
      early skip of rewriting module: google.protobuf.descriptor_pool [assertion]
      early skip of rewriting module: google.protobuf.descriptor_database [assertion]
      early skip of rewriting module: google.protobuf.text_encoding [assertion]
      early skip of rewriting module: google.protobuf.internal.python_edition_defaults [assertion]
      early skip of rewriting module: google.protobuf.internal.python_message [assertion]
      early skip of rewriting module: google.protobuf.text_format [assertion]
      early skip of rewriting module: encodings.raw_unicode_escape [assertion]
      early skip of rewriting module: encodings.unicode_escape [assertion]
      early skip of rewriting module: google.protobuf.internal.decoder [assertion]
      early skip of rewriting module: google.protobuf.internal.containers [assertion]
      early skip of rewriting module: google.protobuf.internal.encoder [assertion]
      early skip of rewriting module: google.protobuf.internal.wire_format [assertion]
      early skip of rewriting module: google.protobuf.internal.type_checkers [assertion]
      early skip of rewriting module: google.protobuf.unknown_fields [assertion]
      early skip of rewriting module: google.protobuf.internal.extension_dict [assertion]
      early skip of rewriting module: google.protobuf.internal.message_listener [assertion]
      early skip of rewriting module: google.protobuf.internal.well_known_types [assertion]
      early skip of rewriting module: google.protobuf.internal.field_mask [assertion]
      early skip of rewriting module: google.protobuf.symbol_database [assertion]
      early skip of rewriting module: google.protobuf.message_factory [assertion]
      early skip of rewriting module: google.protobuf.pyext [assertion]
      early skip of rewriting module: google.protobuf.pyext.cpp_message [assertion]
      early skip of rewriting module: google.protobuf.internal.builder [assertion]
      early skip of rewriting module: google.protobuf.reflection [assertion]
      early skip of rewriting module: google.protobuf.duration_pb2 [assertion]
      early skip of rewriting module: google.protobuf.runtime_version [assertion]
      early skip of rewriting module: grpc [assertion]
      early skip of rewriting module: grpc._compression [assertion]
      early skip of rewriting module: grpc._cython [assertion]
      early skip of rewriting module: grpc._cython.cygrpc [assertion]
      early skip of rewriting module: grpc._observability [assertion]
      early skip of rewriting module: grpc._typing [assertion]
      early skip of rewriting module: grpc._runtime_protos [assertion]
      early skip of rewriting module: grpc._grpcio_metadata [assertion]
      early skip of rewriting module: grpc_tools [assertion]
      early skip of rewriting module: grpc_health [assertion]
      early skip of rewriting module: grpc_reflection [assertion]
      early skip of rewriting module: grpc.aio [assertion]
      early skip of rewriting module: grpc.aio._base_call [assertion]
      early skip of rewriting module: grpc.aio._metadata [assertion]
      early skip of rewriting module: grpc.aio._typing [assertion]
      early skip of rewriting module: grpc.aio._base_channel [assertion]
      early skip of rewriting module: grpc.aio._base_server [assertion]
      early skip of rewriting module: grpc.aio._call [assertion]
      early skip of rewriting module: grpc._common [assertion]
      early skip of rewriting module: grpc.aio._channel [assertion]
      early skip of rewriting module: grpc.aio._interceptor [assertion]
      early skip of rewriting module: grpc.aio._utils [assertion]
      early skip of rewriting module: grpc.aio._server [assertion]
      early skip of rewriting module: grpc_status [assertion]
      early skip of rewriting module: grpc_status.rpc_status [assertion]
      early skip of rewriting module: google.rpc.status_pb2 [assertion]
      early skip of rewriting module: google.protobuf.any_pb2 [assertion]
      early skip of rewriting module: grpc_status._common [assertion]
      early skip of rewriting module: grpc_status._async [assertion]
      early skip of rewriting module: grpc.experimental [assertion]
      early skip of rewriting module: grpc._simple_stubs [assertion]
      early skip of rewriting module: grpc.experimental.aio [assertion]
      early skip of rewriting module: google.api_core.gapic_v1 [assertion]
      early skip of rewriting module: google.api_core.gapic_v1.client_info [assertion]
      early skip of rewriting module: google.api_core.client_info [assertion]
      early skip of rewriting module: google.api_core.gapic_v1.config [assertion]
      early skip of rewriting module: google.api_core.retry [assertion]
      early skip of rewriting module: google.api_core.retry.retry_base [assertion]
      early skip of rewriting module: google.auth [assertion]
      early skip of rewriting module: google.auth.version [assertion]
      early skip of rewriting module: google.auth._default [assertion]
      early skip of rewriting module: google.auth.environment_vars [assertion]
      early skip of rewriting module: google.auth.exceptions [assertion]
      early skip of rewriting module: google.auth.transport [assertion]
      early skip of rewriting module: google.auth.transport._http_client [assertion]
      early skip of rewriting module: google.auth._helpers [assertion]
      early skip of rewriting module: google.api_core.retry.retry_unary [assertion]
      early skip of rewriting module: google.api_core.retry.retry_unary_async [assertion]
      early skip of rewriting module: google.api_core.retry.retry_streaming [assertion]
      early skip of rewriting module: google.api_core.retry.retry_streaming_async [assertion]
      early skip of rewriting module: google.api_core.datetime_helpers [assertion]
      early skip of rewriting module: google.protobuf.timestamp_pb2 [assertion]
      early skip of rewriting module: google.api_core.timeout [assertion]
      early skip of rewriting module: google.api_core.gapic_v1.config_async [assertion]
      early skip of rewriting module: google.api_core.retry_async [assertion]
      early skip of rewriting module: google.api_core.gapic_v1.method [assertion]
      early skip of rewriting module: google.api_core.grpc_helpers [assertion]
      early skip of rewriting module: google.auth.credentials [assertion]
      early skip of rewriting module: google.auth.metrics [assertion]
      early skip of rewriting module: google.auth._credentials_base [assertion]
      early skip of rewriting module: google.auth._refresh_worker [assertion]
      early skip of rewriting module: google.auth.transport.grpc [assertion]
      early skip of rewriting module: google.auth.transport._mtls_helper [assertion]
      early skip of rewriting module: google.oauth2 [assertion]
      early skip of rewriting module: google.oauth2.service_account [assertion]
      early skip of rewriting module: google.auth._service_account_info [assertion]
      early skip of rewriting module: google.auth.crypt [assertion]
      early skip of rewriting module: google.auth.crypt.base [assertion]
      early skip of rewriting module: google.auth.crypt.rsa [assertion]
      early skip of rewriting module: google.auth.crypt._cryptography_rsa [assertion]
      early skip of rewriting module: cryptography.hazmat.backends [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._serialization [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.serialization.ssh [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dsa [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.utils [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ec [assertion]
      early skip of rewriting module: cryptography.hazmat._oid [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed25519 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.padding [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives._asymmetric [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.rsa [assertion]
      early skip of rewriting module: bcrypt [assertion]
      early skip of rewriting module: cryptography.x509 [assertion]
      early skip of rewriting module: cryptography.x509.certificate_transparency [assertion]
      early skip of rewriting module: cryptography.x509.verification [assertion]
      early skip of rewriting module: cryptography.x509.general_name [assertion]
      early skip of rewriting module: cryptography.x509.name [assertion]
      early skip of rewriting module: cryptography.x509.oid [assertion]
      early skip of rewriting module: cryptography.x509.base [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.ed448 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x448 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.x25519 [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.types [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.asymmetric.dh [assertion]
      early skip of rewriting module: cryptography.x509.extensions [assertion]
      early skip of rewriting module: cryptography.hazmat.primitives.constant_time [assertion]
      early skip of rewriting module: cryptography.hazmat.backends.openssl [assertion]
      early skip of rewriting module: cryptography.hazmat.backends.openssl.backend [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings.openssl [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings.openssl.binding [assertion]
      early skip of rewriting module: cryptography.hazmat.bindings.openssl._conditional [assertion]
      early skip of rewriting module: google.auth.crypt.es256 [assertion]
      early skip of rewriting module: google.auth.iam [assertion]
      early skip of rewriting module: google.auth._exponential_backoff [assertion]
      early skip of rewriting module: google.auth.jwt [assertion]
      early skip of rewriting module: cachetools [assertion]
      early skip of rewriting module: cachetools.keys [assertion]
      early skip of rewriting module: cachetools._decorators [assertion]
      early skip of rewriting module: google.oauth2._client [assertion]
      early skip of rewriting module: google.auth.transport.requests [assertion]
      early skip of rewriting module: google.api_core.gapic_v1.method_async [assertion]
      early skip of rewriting module: google.api_core.grpc_helpers_async [assertion]
      early skip of rewriting module: google.api_core.gapic_v1.routing_header [assertion]
      early skip of rewriting module: google.api_core.client_options [assertion]
      early skip of rewriting module: google.longrunning [assertion]
      early skip of rewriting module: google.longrunning.operations_pb2 [assertion]
      early skip of rewriting module: google.longrunning.operations_grpc_pb2 [assertion]
      early skip of rewriting module: google.longrunning.operations_pb2_grpc [assertion]
      early skip of rewriting module: google.protobuf.empty_pb2 [assertion]
      early skip of rewriting module: google.longrunning.operations_proto_pb2 [assertion]
      early skip of rewriting module: google.protobuf.descriptor_pb2 [assertion]
      early skip of rewriting module: google.api [assertion]
      early skip of rewriting module: google.api.annotations_pb2 [assertion]
      early skip of rewriting module: google.api.http_pb2 [assertion]
      early skip of rewriting module: google.api.client_pb2 [assertion]
      early skip of rewriting module: google.api.launch_stage_pb2 [assertion]
      early skip of rewriting module: google.protobuf.field_mask_pb2 [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.pagers [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.cache_service [assertion]
      early skip of rewriting module: proto [assertion]
      early skip of rewriting module: proto.enums [assertion]
      early skip of rewriting module: proto._file_info [assertion]
      early skip of rewriting module: proto.marshal [assertion]
      early skip of rewriting module: proto.marshal.marshal [assertion]
      early skip of rewriting module: google.protobuf.struct_pb2 [assertion]
      early skip of rewriting module: google.protobuf.wrappers_pb2 [assertion]
      early skip of rewriting module: proto.marshal.compat [assertion]
      early skip of rewriting module: google.protobuf.pyext._message [assertion]
      early skip of rewriting module: proto.marshal.collections [assertion]
      early skip of rewriting module: proto.marshal.collections.maps [assertion]
      early skip of rewriting module: proto.utils [assertion]
      early skip of rewriting module: proto.marshal.collections.repeated [assertion]
      early skip of rewriting module: proto.marshal.rules [assertion]
      early skip of rewriting module: proto.marshal.rules.bytes [assertion]
      early skip of rewriting module: proto.marshal.rules.stringy_numbers [assertion]
      early skip of rewriting module: proto.primitives [assertion]
      early skip of rewriting module: proto.marshal.rules.dates [assertion]
      early skip of rewriting module: proto.datetime_helpers [assertion]
      early skip of rewriting module: proto.marshal.rules.struct [assertion]
      early skip of rewriting module: proto.marshal.rules.wrappers [assertion]
      early skip of rewriting module: proto.marshal.rules.field_mask [assertion]
      early skip of rewriting module: proto.marshal.rules.message [assertion]
      early skip of rewriting module: proto._package_info [assertion]
      early skip of rewriting module: proto.marshal.rules.enums [assertion]
      early skip of rewriting module: proto.fields [assertion]
      early skip of rewriting module: proto.message [assertion]
      early skip of rewriting module: google.protobuf.json_format [assertion]
      early skip of rewriting module: proto.modules [assertion]
      early skip of rewriting module: proto.version [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.cached_content [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.content [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.citation [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.discuss_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.safety [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.file [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.file_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.generative_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.retriever [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.model [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.model_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.tuned_model [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.permission [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.permission_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.prediction_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.retriever_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.types.text_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.client [assertion]
      early skip of rewriting module: google.auth.transport.mtls [assertion]
      early skip of rewriting module: google.api_core.client_logging [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.transports.rest [assertion]
      early skip of rewriting module: google.api_core.rest_helpers [assertion]
      early skip of rewriting module: google.api_core.rest_streaming [assertion]
      early skip of rewriting module: google.api_core._rest_streaming_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.cache_service.transports.rest_base [assertion]
      early skip of rewriting module: google.api_core.path_template [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.discuss_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.pagers [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.file_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.generative_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.async_client [assertion]
      early skip of rewriting module: google.api_core.operation [assertion]
      early skip of rewriting module: google.api_core.protobuf_helpers [assertion]
      early skip of rewriting module: google.api_core.future [assertion]
      early skip of rewriting module: google.api_core.future.base [assertion]
      early skip of rewriting module: google.api_core.future.polling [assertion]
      early skip of rewriting module: google.api_core.future._helpers [assertion]
      early skip of rewriting module: google.rpc.code_pb2 [assertion]
      early skip of rewriting module: google.api_core.operation_async [assertion]
      early skip of rewriting module: google.api_core.future.async_future [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.pagers [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.transports.base [assertion]
      early skip of rewriting module: google.api_core.operations_v1 [assertion]
      early skip of rewriting module: google.api_core.operations_v1.abstract_operations_client [assertion]
      early skip of rewriting module: google.api_core.operations_v1.pagers [assertion]
      early skip of rewriting module: google.api_core.operations_v1.pagers_base [assertion]
      early skip of rewriting module: google.api_core.operations_v1.transports [assertion]
      early skip of rewriting module: google.api_core.operations_v1.transports.base [assertion]
      early skip of rewriting module: google.api_core.operations_v1.transports.rest [assertion]
      early skip of rewriting module: google.api_core.operations_v1.transports.rest_asyncio [assertion]
      early skip of rewriting module: google.auth.aio [assertion]
      early skip of rewriting module: google.auth.aio.transport [assertion]
      early skip of rewriting module: google.auth.aio.transport.sessions [assertion]
      early skip of rewriting module: google.auth.aio.credentials [assertion]
      early skip of rewriting module: google.auth.aio.transport.aiohttp [assertion]
      early skip of rewriting module: aiohttp [assertion]
      early skip of rewriting module: aiohttp.hdrs [assertion]
      early skip of rewriting module: multidict [assertion]
      early skip of rewriting module: multidict._abc [assertion]
      early skip of rewriting module: multidict._compat [assertion]
      early skip of rewriting module: multidict._multidict [assertion]
      early skip of rewriting module: aiohttp.client [assertion]
      early skip of rewriting module: yarl [assertion]
      early skip of rewriting module: yarl._query [assertion]
      early skip of rewriting module: yarl._quoters [assertion]
      early skip of rewriting module: yarl._quoting [assertion]
      early skip of rewriting module: yarl._quoting_c [assertion]
      early skip of rewriting module: yarl._url [assertion]
      early skip of rewriting module: propcache [assertion]
      early skip of rewriting module: propcache.api [assertion]
      early skip of rewriting module: propcache._helpers [assertion]
      early skip of rewriting module: propcache._helpers_c [assertion]
      early skip of rewriting module: yarl._parse [assertion]
      early skip of rewriting module: yarl._path [assertion]
      early skip of rewriting module: aiohttp.http [assertion]
      early skip of rewriting module: aiohttp.http_exceptions [assertion]
      early skip of rewriting module: aiohttp.typedefs [assertion]
      early skip of rewriting module: aiohttp.http_parser [assertion]
      early skip of rewriting module: aiohttp.base_protocol [assertion]
      early skip of rewriting module: aiohttp.client_exceptions [assertion]
      early skip of rewriting module: aiohttp.helpers [assertion]
      early skip of rewriting module: netrc [assertion]
      early skip of rewriting module: aiohttp.log [assertion]
      early skip of rewriting module: aiohttp.tcp_helpers [assertion]
      early skip of rewriting module: aiohttp.compression_utils [assertion]
      early skip of rewriting module: brotlicffi [assertion]
      early skip of rewriting module: brotli [assertion]
      early skip of rewriting module: aiohttp.http_writer [assertion]
      early skip of rewriting module: aiohttp.abc [assertion]
      early skip of rewriting module: aiohttp._cookie_helpers [assertion]
      early skip of rewriting module: aiohttp._http_writer [assertion]
      early skip of rewriting module: aiohttp.streams [assertion]
      early skip of rewriting module: aiohttp._http_parser [assertion]
      early skip of rewriting module: aiohttp.http_websocket [assertion]
      early skip of rewriting module: aiohttp._websocket [assertion]
      early skip of rewriting module: aiohttp._websocket.helpers [assertion]
      early skip of rewriting module: aiohttp._websocket.models [assertion]
      early skip of rewriting module: aiohttp._websocket.mask [assertion]
      early skip of rewriting module: aiohttp._websocket.reader [assertion]
      early skip of rewriting module: aiohttp._websocket.reader_c [assertion]
      early skip of rewriting module: aiohttp._websocket.writer [assertion]
      early skip of rewriting module: aiohttp.payload [assertion]
      early skip of rewriting module: aiohttp.client_middlewares [assertion]
      early skip of rewriting module: aiohttp.client_reqrep [assertion]
      early skip of rewriting module: aiohttp.multipart [assertion]
      early skip of rewriting module: aiohttp.formdata [assertion]
      early skip of rewriting module: aiohttp.client_ws [assertion]
      early skip of rewriting module: aiohttp.connector [assertion]
      early skip of rewriting module: aiohappyeyeballs [assertion]
      early skip of rewriting module: aiohappyeyeballs.impl [assertion]
      early skip of rewriting module: aiohappyeyeballs._staggered [assertion]
      early skip of rewriting module: aiohappyeyeballs.types [assertion]
      early skip of rewriting module: aiohappyeyeballs.utils [assertion]
      early skip of rewriting module: aiohttp.client_proto [assertion]
      early skip of rewriting module: aiohttp.resolver [assertion]
      early skip of rewriting module: aiodns [assertion]
      early skip of rewriting module: aiohttp.cookiejar [assertion]
      early skip of rewriting module: aiohttp.tracing [assertion]
      early skip of rewriting module: aiosignal [assertion]
      early skip of rewriting module: frozenlist [assertion]
      early skip of rewriting module: frozenlist._frozenlist [assertion]
      early skip of rewriting module: aiohttp.client_middleware_digest_auth [assertion]
      early skip of rewriting module: aiohttp.payload_streamer [assertion]
      early skip of rewriting module: google.auth.aio._helpers [assertion]
      early skip of rewriting module: google.api_core.operations_v1.abstract_operations_base_client [assertion]
      early skip of rewriting module: google.api_core.operations_v1.operations_async_client [assertion]
      early skip of rewriting module: google.api_core.page_iterator_async [assertion]
      early skip of rewriting module: google.api_core.page_iterator [assertion]
      early skip of rewriting module: google.api_core.operations_v1.operations_client [assertion]
      early skip of rewriting module: google.api_core.operations_v1.operations_rest_client_async [assertion]
      early skip of rewriting module: google.api_core.operations_v1.pagers_async [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.model_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.pagers [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.permission_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.prediction_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.pagers [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.retriever_service.transports.rest_base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.async_client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.client [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.transports [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.transports.base [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.transports.grpc [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.transports.grpc_asyncio [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.transports.rest [assertion]
      early skip of rewriting module: google.ai.generativelanguage_v1beta.services.text_service.transports.rest_base [assertion]
      early skip of rewriting module: langchain_google_genai.chat_models [assertion]
      early skip of rewriting module: filetype [assertion]
      early skip of rewriting module: filetype.filetype [assertion]
      early skip of rewriting module: filetype.match [assertion]
      early skip of rewriting module: filetype.types [assertion]
      early skip of rewriting module: filetype.types.archive [assertion]
      early skip of rewriting module: filetype.types.base [assertion]
      early skip of rewriting module: filetype.types.audio [assertion]
      early skip of rewriting module: filetype.types.application [assertion]
      early skip of rewriting module: filetype.types.document [assertion]
      early skip of rewriting module: filetype.types.font [assertion]
      early skip of rewriting module: filetype.types.image [assertion]
      early skip of rewriting module: filetype.types.isobmff [assertion]
      early skip of rewriting module: filetype.types.video [assertion]
      early skip of rewriting module: filetype.utils [assertion]
      early skip of rewriting module: filetype.helpers [assertion]
      early skip of rewriting module: langchain_core [assertion]
      early skip of rewriting module: langchain_core._api [assertion]
      early skip of rewriting module: langchain_core._import_utils [assertion]
      early skip of rewriting module: langchain_core._api.beta_decorator [assertion]
      early skip of rewriting module: langchain_core._api.internal [assertion]
      early skip of rewriting module: langchain_core._api.deprecation [assertion]
      early skip of rewriting module: langchain_core.version [assertion]
      early skip of rewriting module: langchain_core.callbacks [assertion]
      early skip of rewriting module: langchain_core.callbacks.manager [assertion]
      early skip of rewriting module: langchain_core.callbacks.base [assertion]
      early skip of rewriting module: langchain_core.callbacks.stdout [assertion]
      early skip of rewriting module: langchain_core.utils [assertion]
      early skip of rewriting module: langchain_core.utils.input [assertion]
      early skip of rewriting module: langchain_core.messages [assertion]
      early skip of rewriting module: langchain_core.messages.base [assertion]
      early skip of rewriting module: langchain_core.load [assertion]
      early skip of rewriting module: langchain_core.load.load [assertion]
      early skip of rewriting module: langchain_core.load.mapping [assertion]
      early skip of rewriting module: langchain_core.load.serializable [assertion]
      early skip of rewriting module: langchain_core.utils._merge [assertion]
      early skip of rewriting module: langchain_core.utils.interactive_env [assertion]
      early skip of rewriting module: langchain_core.messages.utils [assertion]
      early skip of rewriting module: langchain_core.exceptions [assertion]
      early skip of rewriting module: langchain_core.messages.content_blocks [assertion]
      early skip of rewriting module: langchain_core.messages.ai [assertion]
      early skip of rewriting module: langchain_core.messages.tool [assertion]
      early skip of rewriting module: langchain_core.utils.json [assertion]
      early skip of rewriting module: langchain_core.utils.usage [assertion]
      early skip of rewriting module: langchain_core.messages.chat [assertion]
      early skip of rewriting module: langchain_core.messages.function [assertion]
      early skip of rewriting module: langchain_core.messages.human [assertion]
      early skip of rewriting module: langchain_core.messages.modifier [assertion]
      early skip of rewriting module: langchain_core.messages.system [assertion]
      early skip of rewriting module: langchain_core.tracers [assertion]
      early skip of rewriting module: langchain_core.tracers.schemas [assertion]
      early skip of rewriting module: langchain_core.utils.pydantic [assertion]
      early skip of rewriting module: packaging [assertion]
      early skip of rewriting module: packaging.version [assertion]
      early skip of rewriting module: packaging._structures [assertion]
      early skip of rewriting module: langchain_core.utils.env [assertion]
      early skip of rewriting module: langchain_core.language_models [assertion]
      early skip of rewriting module: langchain_core.language_models.base [assertion]
      early skip of rewriting module: langchain_core.caches [assertion]
      early skip of rewriting module: langchain_core.outputs [assertion]
      early skip of rewriting module: langchain_core.outputs.generation [assertion]
      early skip of rewriting module: langchain_core.runnables [assertion]
      early skip of rewriting module: langchain_core.runnables.config [assertion]
      early skip of rewriting module: langchain_core.runnables.utils [assertion]
      early skip of rewriting module: langchain_core.prompt_values [assertion]
      early skip of rewriting module: pydantic._internal._serializers [assertion]
      early skip of rewriting module: langchain_core.runnables.base [assertion]
      early skip of rewriting module: langchain_core.runnables.graph [assertion]
      early skip of rewriting module: langchain_core.utils.aiter [assertion]
      early skip of rewriting module: langchain_core.utils.iter [assertion]
      early skip of rewriting module: langchain_core.utils.utils [assertion]
      early skip of rewriting module: langchain_core.language_models.chat_models [assertion]
      early skip of rewriting module: langchain_core.globals [assertion]
      early skip of rewriting module: langchain_core.language_models._utils [assertion]
      early skip of rewriting module: langchain_core.load.dump [assertion]
      early skip of rewriting module: langchain_core.outputs.chat_generation [assertion]
      early skip of rewriting module: langchain_core.outputs.chat_result [assertion]
      early skip of rewriting module: langchain_core.outputs.llm_result [assertion]
      early skip of rewriting module: langchain_core.outputs.run_info [assertion]
      early skip of rewriting module: langchain_core.rate_limiters [assertion]
      early skip of rewriting module: langchain_core.runnables.passthrough [assertion]
      early skip of rewriting module: langchain_core.tracers._streaming [assertion]
      early skip of rewriting module: langchain_core.utils.function_calling [assertion]
      early skip of rewriting module: langchain_core.utils.json_schema [assertion]
      early skip of rewriting module: langchain_core.output_parsers [assertion]
      early skip of rewriting module: langchain_core.output_parsers.base [assertion]
      early skip of rewriting module: langchain_core.output_parsers.openai_tools [assertion]
      early skip of rewriting module: langchain_core.output_parsers.transform [assertion]
      early skip of rewriting module: langchain_core.tools [assertion]
      early skip of rewriting module: langchain_core.tools.base [assertion]
      early skip of rewriting module: pydantic.deprecated.decorator [assertion]
      early skip of rewriting module: pydantic.alias_generators [assertion]
      early skip of rewriting module: tenacity [assertion]
      early skip of rewriting module: tenacity._utils [assertion]
      early skip of rewriting module: tenacity.retry [assertion]
      early skip of rewriting module: tenacity.nap [assertion]
      early skip of rewriting module: tenacity.stop [assertion]
      early skip of rewriting module: tenacity.wait [assertion]
      early skip of rewriting module: tenacity.before [assertion]
      early skip of rewriting module: tenacity.after [assertion]
      early skip of rewriting module: tenacity.before_sleep [assertion]
      early skip of rewriting module: tornado [assertion]
      early skip of rewriting module: tenacity.asyncio [assertion]
      early skip of rewriting module: tenacity.asyncio.retry [assertion]
      early skip of rewriting module: langchain_google_genai._common [assertion]
      early skip of rewriting module: langchain_google_genai._function_utils [assertion]
      early skip of rewriting module: google.ai.generativelanguage [assertion]
      early skip of rewriting module: google.ai.generativelanguage.gapic_version [assertion]
      early skip of rewriting module: langchain_core.tools.convert [assertion]
      early skip of rewriting module: langchain_core.tools.simple [assertion]
      early skip of rewriting module: langchain_core.tools.structured [assertion]
      early skip of rewriting module: langchain_google_genai._image_utils [assertion]
      early skip of rewriting module: langchain_google_genai._genai_extension [assertion]
      early skip of rewriting module: langchain_google_genai.embeddings [assertion]
      early skip of rewriting module: langchain_core.embeddings [assertion]
      early skip of rewriting module: langchain_core.embeddings.embeddings [assertion]
      early skip of rewriting module: langchain_google_genai.genai_aqa [assertion]
      early skip of rewriting module: langchain_google_genai.google_vector_store [assertion]
      early skip of rewriting module: langchain_core.documents [assertion]
      early skip of rewriting module: langchain_core.documents.base [assertion]
      early skip of rewriting module: langchain_core.vectorstores [assertion]
      early skip of rewriting module: langchain_core.vectorstores.base [assertion]
      early skip of rewriting module: langchain_core.retrievers [assertion]
      early skip of rewriting module: langchain_google_genai.llms [assertion]
      early skip of rewriting module: langchain_core.language_models.llms [assertion]
      early skip of rewriting module: yaml [assertion]
      early skip of rewriting module: yaml.error [assertion]
      early skip of rewriting module: yaml.tokens [assertion]
      early skip of rewriting module: yaml.events [assertion]
      early skip of rewriting module: yaml.nodes [assertion]
      early skip of rewriting module: yaml.loader [assertion]
      early skip of rewriting module: yaml.reader [assertion]
      early skip of rewriting module: yaml.scanner [assertion]
      early skip of rewriting module: yaml.parser [assertion]
      early skip of rewriting module: yaml.composer [assertion]
      early skip of rewriting module: yaml.constructor [assertion]
      early skip of rewriting module: yaml.resolver [assertion]
      early skip of rewriting module: yaml.dumper [assertion]
      early skip of rewriting module: yaml.emitter [assertion]
      early skip of rewriting module: yaml.serializer [assertion]
      early skip of rewriting module: yaml.representer [assertion]
      early skip of rewriting module: yaml.cyaml [assertion]
      early skip of rewriting module: yaml._yaml [assertion]
      early skip of rewriting module: langchain_core.prompts [assertion]
      early skip of rewriting module: langchain_core.prompts.prompt [assertion]
      early skip of rewriting module: langchain_core.prompts.string [assertion]
      early skip of rewriting module: langchain_core.prompts.base [assertion]
      early skip of rewriting module: langchain_core.utils.mustache [assertion]
      early skip of rewriting module: langchain_core.utils.formatting [assertion]
      early skip of rewriting module: langchain_core.output_parsers.pydantic [assertion]
      early skip of rewriting module: langchain_core.output_parsers.json [assertion]
      early skip of rewriting module: jsonpatch [assertion]
      early skip of rewriting module: jsonpointer [assertion]
      early skip of rewriting module: langchain_core.output_parsers.format_instructions [assertion]
      early skip of rewriting module: langchain [assertion]
      early skip of rewriting module: langchain.output_parsers [assertion]
      early skip of rewriting module: langchain_core.output_parsers.list [assertion]
      early skip of rewriting module: langchain_core.output_parsers.xml [assertion]
      early skip of rewriting module: langchain._api [assertion]
      early skip of rewriting module: langchain._api.deprecation [assertion]
      early skip of rewriting module: langchain._api.module_import [assertion]
      early skip of rewriting module: langchain._api.interactive_env [assertion]
      early skip of rewriting module: langchain.output_parsers.boolean [assertion]
      early skip of rewriting module: langchain.output_parsers.combining [assertion]
      early skip of rewriting module: langchain.output_parsers.datetime [assertion]
      early skip of rewriting module: langchain_core.utils.strings [assertion]
      early skip of rewriting module: langchain.output_parsers.enum [assertion]
      early skip of rewriting module: langchain.output_parsers.fix [assertion]
      early skip of rewriting module: langchain_core.output_parsers.string [assertion]
      early skip of rewriting module: langchain.output_parsers.prompts [assertion]
      early skip of rewriting module: langchain.output_parsers.pandas_dataframe [assertion]
      early skip of rewriting module: langchain.output_parsers.format_instructions [assertion]
      early skip of rewriting module: langchain.output_parsers.regex [assertion]
      early skip of rewriting module: langchain.output_parsers.regex_dict [assertion]
      early skip of rewriting module: langchain.output_parsers.retry [assertion]
      early skip of rewriting module: langchain.output_parsers.structured [assertion]
      early skip of rewriting module: langchain.output_parsers.yaml [assertion]
      early skip of rewriting module: src.ultibot_backend.services.market_data_service [assertion]
      early skip of rewriting module: src.ultibot_backend.services.notification_service [assertion]
      early skip of rewriting module: src.ultibot_backend.adapters.telegram_adapter [assertion]
      early skip of rewriting module: src.ultibot_backend.services.performance_service [assertion]
      early skip of rewriting module: src.ultibot_backend.services.strategy_service [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.models [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.models.strategy_models [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.models.performance_models [assertion]
      early skip of rewriting module: src.ultibot_backend.services.portfolio_service [assertion]
      early skip of rewriting module: src.ultibot_backend.services.trading_engine_service [assertion]
      early skip of rewriting module: src.ultibot_backend.services.unified_order_execution_service [assertion]
      early skip of rewriting module: src.ultibot_backend.services.trading_report_service [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.market_data [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.notifications [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.opportunities [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.performance [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.portfolio [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.reports [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.strategies [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.trades [assertion]
      early skip of rewriting module: src.ultibot_backend.api.v1.endpoints.trading [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: TestClient
            obj: <class 'starlette.testclient.TestClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: app
            obj: <fastapi.applications.FastAPI object at 0x000001F98E4237D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: PerformanceService
            obj: <class 'src.ultibot_backend.services.performance_service.PerformanceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: StrategyService
            obj: <class 'src.ultibot_backend.services.strategy_service.StrategyService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: StrategyPerformanceData
            obj: <class 'src.ultibot_backend.api.v1.models.performance_models.StrategyPerformanceData'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: OperatingMode
            obj: <enum 'OperatingMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: PositionStatus
            obj: <enum 'PositionStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: get_current_user_id
            obj: <function get_current_user_id at 0x000001F98AEA25C0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: FIXED_TEST_USER_ID
            obj: 7674b4ec-2f6f-497b-b928-1f4b917f36d9
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: mock_persistence_service_integration
            obj: <pytest_fixture(<function mock_persistence_service_integration at 0x000001F98B335440>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: mock_strategy_service_integration
            obj: <pytest_fixture(<function mock_strategy_service_integration at 0x000001F98E4A19E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: override_get_current_user_id
            obj: <function override_get_current_user_id at 0x000001F98E4A1D00>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: client
            obj: <pytest_fixture(<function client at 0x000001F98E4A1E40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_no_data
            obj: <function test_get_strategies_performance_endpoint_no_data at 0x000001F98E4A1EE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E44E110>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_no_data>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_with_data
            obj: <function test_get_strategies_performance_endpoint_with_data at 0x000001F98E4A1F80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E3AB110>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_with_data>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_filter_real_mode
            obj: <function test_get_strategies_performance_endpoint_filter_real_mode at 0x000001F98E4A2020>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4C1CD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_filter_real_mode>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_multiple_strategies
            obj: <function test_get_strategies_performance_endpoint_multiple_strategies at 0x000001F98E4A20C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4C2650>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_multiple_strategies>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_strategy_not_found
            obj: <function test_get_strategies_performance_endpoint_strategy_not_found at 0x000001F98E4A2160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4C2BD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_strategy_not_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_invalid_mode_parameter
            obj: <function test_get_strategies_performance_endpoint_invalid_mode_parameter at 0x000001F98E4A2200>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4C2BD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_invalid_mode_parameter>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_endpoints.py>
            name: test_get_strategies_performance_endpoint_no_mode_filter
            obj: <function test_get_strategies_performance_endpoint_no_mode_filter at 0x000001F98E4A22A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4C2150>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_strategies_performance_endpoint_no_mode_filter>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api/v1/endpoints/test_performance_endpoints.py' lenresult=7 outcome='passed'> [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_no_data> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_no_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_with_data> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_with_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_filter_real_mode> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_filter_real_mode>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_multiple_strategies> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_multiple_strategies>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_strategy_not_found> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_strategy_not_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_invalid_mode_parameter> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_invalid_mode_parameter>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_strategies_performance_endpoint_no_mode_filter> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_strategies_performance_endpoint_no_mode_filter>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api/v1/endpoints/test_performance_endpoints.py' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api/v1/endpoints' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_config_endpoints.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_config_endpoints.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_config_endpoints.py>
      find_module called for: test_config_endpoints [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\api\\v1\\test_config_endpoints.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_config_endpoints.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: AsyncClient
            obj: <class 'httpx.AsyncClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: app
            obj: <fastapi.applications.FastAPI object at 0x000001F98E4237D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: FIXED_USER_ID
            obj: 00000000-0000-0000-0000-000000000001
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: client
            obj: <pytest_fixture(<function client at 0x000001F98E4A2A20>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: cleanup_db_after_each_test
            obj: <pytest_fixture(<function cleanup_db_after_each_test at 0x000001F98E4A2AC0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: test_get_user_config_initial
            obj: <function test_get_user_config_initial at 0x000001F98E4A2B60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4D0D10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_user_config_initial>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: test_patch_user_config_update_paper_trading
            obj: <function test_patch_user_config_update_paper_trading at 0x000001F98E4A2C00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4D1050>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_patch_user_config_update_paper_trading>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: test_patch_user_config_only_paper_trading_active
            obj: <function test_patch_user_config_only_paper_trading_active at 0x000001F98E4A2CA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4D1810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_patch_user_config_only_paper_trading_active>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: test_patch_user_config_only_capital
            obj: <function test_patch_user_config_only_capital at 0x000001F98E4A2D40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4D2190>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_patch_user_config_only_capital>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_endpoints.py>
            name: test_patch_user_config_invalid_data
            obj: <function test_patch_user_config_invalid_data at 0x000001F98E4A2DE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4D2750>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_patch_user_config_invalid_data>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api/v1/test_config_endpoints.py' lenresult=5 outcome='passed'> [hook]
    genitems <Coroutine test_get_user_config_initial> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_user_config_initial>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_patch_user_config_update_paper_trading> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_patch_user_config_update_paper_trading>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_patch_user_config_only_paper_trading_active> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_patch_user_config_only_paper_trading_active>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_patch_user_config_only_capital> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_patch_user_config_only_capital>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_patch_user_config_invalid_data> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_patch_user_config_invalid_data>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api/v1/test_config_endpoints.py' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_real_trading_flow.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_real_trading_flow.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_real_trading_flow.py>
      find_module called for: test_real_trading_flow [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\api\\v1\\test_real_trading_flow.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_real_trading_flow.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: OrderExecutionService
            obj: <class 'src.ultibot_backend.services.order_execution_service.OrderExecutionService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: MarketDataService
            obj: <class 'src.ultibot_backend.services.market_data_service.MarketDataService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: PortfolioService
            obj: <class 'src.ultibot_backend.services.portfolio_service.PortfolioService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: NotificationService
            obj: <class 'src.ultibot_backend.services.notification_service.NotificationService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: Opportunity
            obj: <class 'src.shared.data_types.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: AIAnalysis
            obj: <class 'src.shared.data_types.AIAnalysis'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: RealTradingSettings
            obj: <class 'src.shared.data_types.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: RiskProfileSettings
            obj: <class 'src.shared.data_types.RiskProfileSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: TradeOrderDetails
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.TradeOrderDetails'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: OpportunitySourceType
            obj: <enum 'OpportunitySourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: ServiceName
            obj: <enum 'ServiceName'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: PortfolioSnapshot
            obj: <class 'src.shared.data_types.PortfolioSnapshot'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: PortfolioSummary
            obj: <class 'src.shared.data_types.PortfolioSummary'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: OrderCategory
            obj: <enum 'OrderCategory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: APICredential
            obj: <class 'src.shared.data_types.APICredential'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: test_complete_real_trading_flow_with_capital_management
            obj: <function test_complete_real_trading_flow_with_capital_management at 0x000001F98E4A3920>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4DCF50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_complete_real_trading_flow_with_capital_management>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: test_complete_real_trading_flow_capital_limit_exceeded
            obj: <function test_complete_real_trading_flow_capital_limit_exceeded at 0x000001F98E4A3A60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4DD390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_complete_real_trading_flow_capital_limit_exceeded>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: test_complete_real_trading_tsl_monitoring_and_execution
            obj: <function test_complete_real_trading_tsl_monitoring_and_execution at 0x000001F98E4A39C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4DDB10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_complete_real_trading_tsl_monitoring_and_execution>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_real_trading_flow.py>
            name: test_capital_management_daily_reset
            obj: <function test_capital_management_daily_reset at 0x000001F98E4A3B00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F98E4DE390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_capital_management_daily_reset>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api/v1/test_real_trading_flow.py' lenresult=4 outcome='passed'> [hook]
    genitems <Coroutine test_complete_real_trading_flow_with_capital_management> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_complete_real_trading_flow_with_capital_management>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_complete_real_trading_flow_capital_limit_exceeded> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_complete_real_trading_flow_capital_limit_exceeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_complete_real_trading_tsl_monitoring_and_execution> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_complete_real_trading_tsl_monitoring_and_execution>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_capital_management_daily_reset> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_capital_management_daily_reset>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api/v1/test_real_trading_flow.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_reports_endpoints.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_reports_endpoints.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_reports_endpoints.py>
      find_module called for: test_reports_endpoints [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\api\\v1\\test_reports_endpoints.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\api\v1\test_reports_endpoints.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: AsyncClient
            obj: <class 'httpx.AsyncClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: timedelta
            obj: <class 'datetime.timedelta'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: urlencode
            obj: <function urlencode at 0x000001F985F2BA60>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: app
            obj: <fastapi.applications.FastAPI object at 0x000001F98E4237D0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: FIXED_USER_ID
            obj: 00000000-0000-0000-0000-000000000001
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: client
            obj: <pytest_fixture(<function client at 0x000001F98E4A3BA0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: setup_and_cleanup_db
            obj: <pytest_fixture(<function setup_and_cleanup_db at 0x000001F98E4A3740>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: TestPaperTradingHistoryEndpoint
            obj: <class 'test_reports_endpoints.TestPaperTradingHistoryEndpoint'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: TestPaperTradingPerformanceEndpoint
            obj: <class 'test_reports_endpoints.TestPaperTradingPerformanceEndpoint'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_reports_endpoints.py>
            name: TestRealTradingEndpoints
            obj: <class 'test_reports_endpoints.TestRealTradingEndpoints'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/api/v1/test_reports_endpoints.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api/v1/test_reports_endpoints.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api/v1' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/api' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir fixtures> [collection]
      pytest_collectstart [hook]
          collector: <Dir fixtures>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir fixtures>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\integration\fixtures\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\integration\fixtures\__pycache__
        finish pytest_ignore_collect --> True [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/fixtures' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/fixtures' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_story_4_5_trading_mode_integration.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_story_4_5_trading_mode_integration.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_story_4_5_trading_mode_integration.py>
      find_module called for: test_story_4_5_trading_mode_integration [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\test_story_4_5_trading_mode_integration.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_4_5_trading_mode_integration.py [assertion]
      early skip of rewriting module: src.ultibot_ui [assertion]
      early skip of rewriting module: src.ultibot_ui.services [assertion]
      early skip of rewriting module: src.ultibot_ui.services.ui_market_data_service [assertion]
      early skip of rewriting module: src.ultibot_ui.services.api_client [assertion]
      early skip of rewriting module: src.ultibot_ui.services.ui_config_service [assertion]
      early skip of rewriting module: src.ultibot_ui.services.trading_mode_state [assertion]
      early skip of rewriting module: PySide6 [assertion]
      early skip of rewriting module: shiboken6 [assertion]
      early skip of rewriting module: shiboken6.Shiboken [assertion]
      early skip of rewriting module: PySide6.support [assertion]
      early skip of rewriting module: PySide6.support.deprecated [assertion]
      early skip of rewriting module: PySide6.QtCore [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: UltiBotAPIClient
            obj: <class 'src.ultibot_ui.services.api_client.UltiBotAPIClient'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: get_trading_mode_manager
            obj: <function get_trading_mode_manager at 0x000001F98E4E9BC0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: reset_trading_mode_manager
            obj: <function reset_trading_mode_manager at 0x000001F98E5A7420>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: TestTradingModeAPIIntegration
            obj: <class 'test_story_4_5_trading_mode_integration.TestTradingModeAPIIntegration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: TestTradingModeStateIntegration
            obj: <class 'test_story_4_5_trading_mode_integration.TestTradingModeStateIntegration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_4_5_trading_mode_integration.py>
            name: TestEndToEndTradingModeFlow
            obj: <class 'test_story_4_5_trading_mode_integration.TestEndToEndTradingModeFlow'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/test_story_4_5_trading_mode_integration.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/test_story_4_5_trading_mode_integration.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_story_5_4_complete_flow.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_story_5_4_complete_flow.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_story_5_4_complete_flow.py>
      find_module called for: test_story_5_4_complete_flow [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\test_story_5_4_complete_flow.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\test_story_5_4_complete_flow.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: StrategyService
            obj: <class 'src.ultibot_backend.services.strategy_service.StrategyService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: AIOrchestrator
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.AIOrchestrator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: ScalpingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ScalpingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: DayTradingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.DayTradingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: ApplicabilityRules
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ApplicabilityRules'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: UserConfiguration
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: AIStrategyConfiguration
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.AIStrategyConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: ConfidenceThresholds
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.ConfidenceThresholds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: RealTradingSettings
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: user_id
            obj: <pytest_fixture(<function user_id at 0x000001F98E738220>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F98E7382C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: strategy_service
            obj: <pytest_fixture(<function strategy_service at 0x000001F98E738360>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: config_service
            obj: <pytest_fixture(<function config_service at 0x000001F98E738400>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: ai_orchestrator
            obj: <pytest_fixture(<function ai_orchestrator at 0x000001F98E7384A0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: trading_engine
            obj: <pytest_fixture(<function trading_engine at 0x000001F98E738540>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: btc_opportunity
            obj: <pytest_fixture(<function btc_opportunity at 0x000001F98E7385E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: eth_opportunity
            obj: <pytest_fixture(<function eth_opportunity at 0x000001F98E738680>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: scalping_strategy_btc
            obj: <pytest_fixture(<function scalping_strategy_btc at 0x000001F98E738720>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: day_trading_strategy_multi
            obj: <pytest_fixture(<function day_trading_strategy_multi at 0x000001F98E7387C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: ai_strategy_config
            obj: <pytest_fixture(<function ai_strategy_config at 0x000001F98E738860>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: user_configuration
            obj: <pytest_fixture(<function user_configuration at 0x000001F98E738900>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: TestCompleteOpportunityProcessingFlow
            obj: <class 'test_story_5_4_complete_flow.TestCompleteOpportunityProcessingFlow'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_story_5_4_complete_flow.py>
            name: TestTradeCreationWithStrategyAssociation
            obj: <class 'test_story_5_4_complete_flow.TestTradeCreationWithStrategyAssociation'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/test_story_5_4_complete_flow.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/test_story_5_4_complete_flow.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_strategy_ai_trading_flow.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_strategy_ai_trading_flow.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_strategy_ai_trading_flow.py>
      find_module called for: test_strategy_ai_trading_flow [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\integration\\test_strategy_ai_trading_flow.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\integration\test_strategy_ai_trading_flow.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: uuid
            obj: <module 'uuid' from 'C:\\Program Files\\Python311\\Lib\\uuid.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: TradingEngine
            obj: <class 'src.ultibot_backend.services.trading_engine_service.TradingEngine'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: TradingDecision
            obj: <class 'src.ultibot_backend.services.trading_engine_service.TradingDecision'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: AIOrchestrator
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.AIOrchestrator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: AIAnalysisResult
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.AIAnalysisResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: ScalpingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ScalpingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: DayTradingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.DayTradingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: AIStrategyConfiguration
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.AIStrategyConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: ConfidenceThresholds
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.ConfidenceThresholds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: Opportunity
            obj: <class 'src.ultibot_backend.core.domain_models.opportunity_models.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: SourceType
            obj: <enum 'SourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: Direction
            obj: <enum 'Direction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: InitialSignal
            obj: <class 'src.ultibot_backend.core.domain_models.opportunity_models.InitialSignal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: mock_strategy_service
            obj: <pytest_fixture(<function mock_strategy_service at 0x000001F98E739B20>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: mock_configuration_service
            obj: <pytest_fixture(<function mock_configuration_service at 0x000001F98E739BC0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: mock_ai_orchestrator
            obj: <pytest_fixture(<function mock_ai_orchestrator at 0x000001F98E739C60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: trading_engine
            obj: <pytest_fixture(<function trading_engine at 0x000001F98E739D00>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: sample_opportunity
            obj: <pytest_fixture(<function sample_opportunity at 0x000001F98E739DA0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: scalping_strategy_with_ai
            obj: <pytest_fixture(<function scalping_strategy_with_ai at 0x000001F98E739E40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: scalping_strategy_without_ai
            obj: <pytest_fixture(<function scalping_strategy_without_ai at 0x000001F98E739EE0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: ai_config_scalping
            obj: <pytest_fixture(<function ai_config_scalping at 0x000001F98E739F80>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: TestStrategyAITradingEngineIntegration
            obj: <class 'test_strategy_ai_trading_flow.TestStrategyAITradingEngineIntegration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_strategy_ai_trading_flow.py>
            name: TestTradeCreationFromDecision
            obj: <class 'test_strategy_ai_trading_flow.TestTradeCreationFromDecision'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/integration/test_strategy_ai_trading_flow.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration/test_strategy_ai_trading_flow.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/integration' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir system> [collection]
      pytest_collectstart [hook]
          collector: <Dir system>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir system>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\system\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\system\__pycache__
        finish pytest_ignore_collect --> True [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/system' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/system' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir ui> [collection]
      pytest_collectstart [hook]
          collector: <Dir ui>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir ui>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit
            path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit
            parent: <Dir ui>
        finish pytest_collect_directory --> <Dir unit> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/ui' lenresult=1 outcome='passed'> [hook]
    genitems <Dir unit> [collection]
      pytest_collectstart [hook]
          collector: <Dir unit>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir unit>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py
            path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir unit>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py
            path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir unit>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py
              path: C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py
          finish pytest_pycollect_makemodule --> <Module test_main_ui.py> [hook]
        finish pytest_collect_file --> [<Module test_main_ui.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/ui/unit' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_main_ui.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_main_ui.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_main_ui.py>
      find_module called for: test_main_ui [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\ui\\unit\\test_main_ui.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\ui\unit\test_main_ui.py [assertion]
      early skip of rewriting module: PySide6.QtWidgets [assertion]
      early skip of rewriting module: PySide6.QtGui [assertion]
      early skip of rewriting module: src.ultibot_ui.main [assertion]
      early skip of rewriting module: qasync [assertion]
      early skip of rewriting module: qasync._common [assertion]
      early skip of rewriting module: qasync._unix [assertion]
      early skip of rewriting module: qasync._windows [assertion]
      early skip of rewriting module: src.ultibot_ui.windows [assertion]
      early skip of rewriting module: src.ultibot_ui.windows.main_window [assertion]
      early skip of rewriting module: src.ultibot_ui.models [assertion]
      early skip of rewriting module: src.ultibot_ui.widgets [assertion]
      early skip of rewriting module: src.ultibot_ui.widgets.sidebar_navigation_widget [assertion]
      early skip of rewriting module: src.ultibot_ui.windows.dashboard_view [assertion]
      early skip of rewriting module: src.ultibot_ui.widgets.chart_widget [assertion]
      early skip of rewriting module: mplfinance [assertion]
      early skip of rewriting module: mplfinance._mpf_warnings [assertion]
      early skip of rewriting module: mplfinance.plotting [assertion]
      early skip of rewriting module: matplotlib [assertion]
      early skip of rewriting module: matplotlib._api [assertion]
      early skip of rewriting module: matplotlib._api.deprecation [assertion]
      early skip of rewriting module: matplotlib._version [assertion]
      early skip of rewriting module: matplotlib.cbook [assertion]
      early skip of rewriting module: gzip [assertion]
      early skip of rewriting module: numpy [assertion]
      early skip of rewriting module: numpy.version [assertion]
      early skip of rewriting module: numpy._expired_attrs_2_0 [assertion]
      early skip of rewriting module: numpy._globals [assertion]
      early skip of rewriting module: numpy._utils [assertion]
      early skip of rewriting module: numpy._utils._convertions [assertion]
      early skip of rewriting module: numpy._distributor_init [assertion]
      early skip of rewriting module: numpy._distributor_init_local [assertion]
      early skip of rewriting module: numpy.__config__ [assertion]
      early skip of rewriting module: numpy._core [assertion]
      early skip of rewriting module: numpy._core.multiarray [assertion]
      early skip of rewriting module: numpy._core._multiarray_umath [assertion]
      early skip of rewriting module: numpy.exceptions [assertion]
      early skip of rewriting module: numpy._core._exceptions [assertion]
      early skip of rewriting module: numpy._core.printoptions [assertion]
      early skip of rewriting module: numpy.dtypes [assertion]
      early skip of rewriting module: numpy._core.overrides [assertion]
      early skip of rewriting module: numpy._utils._inspect [assertion]
      early skip of rewriting module: numpy._core.umath [assertion]
      early skip of rewriting module: numpy._core.numerictypes [assertion]
      early skip of rewriting module: numpy._core._dtype [assertion]
      early skip of rewriting module: numpy._core._string_helpers [assertion]
      early skip of rewriting module: numpy._core._type_aliases [assertion]
      early skip of rewriting module: numpy._core._machar [assertion]
      early skip of rewriting module: numpy._core._ufunc_config [assertion]
      early skip of rewriting module: numpy._core.fromnumeric [assertion]
      early skip of rewriting module: numpy._core._methods [assertion]
      early skip of rewriting module: numpy._core.einsumfunc [assertion]
      early skip of rewriting module: numpy._core.numeric [assertion]
      early skip of rewriting module: numpy._core.shape_base [assertion]
      early skip of rewriting module: numpy._core._asarray [assertion]
      early skip of rewriting module: numpy._core.arrayprint [assertion]
      early skip of rewriting module: numpy._core.function_base [assertion]
      early skip of rewriting module: numpy._core.getlimits [assertion]
      early skip of rewriting module: numpy._core.memmap [assertion]
      early skip of rewriting module: numpy._core.records [assertion]
      early skip of rewriting module: numpy._core._add_newdocs [assertion]
      early skip of rewriting module: numpy._core._add_newdocs_scalars [assertion]
      early skip of rewriting module: numpy._core._dtype_ctypes [assertion]
      early skip of rewriting module: numpy._core._internal [assertion]
      early skip of rewriting module: numpy._pytesttester [assertion]
      early skip of rewriting module: numpy.lib [assertion]
      early skip of rewriting module: numpy.lib._arraypad_impl [assertion]
      early skip of rewriting module: numpy.lib._index_tricks_impl [assertion]
      early skip of rewriting module: numpy.matrixlib [assertion]
      early skip of rewriting module: numpy.matrixlib.defmatrix [assertion]
      early skip of rewriting module: numpy.linalg [assertion]
      early skip of rewriting module: numpy.linalg._linalg [assertion]
      early skip of rewriting module: numpy._typing [assertion]
      early skip of rewriting module: numpy._typing._array_like [assertion]
      early skip of rewriting module: numpy._typing._nbit_base [assertion]
      early skip of rewriting module: numpy._typing._nested_sequence [assertion]
      early skip of rewriting module: numpy._typing._shape [assertion]
      early skip of rewriting module: numpy._typing._char_codes [assertion]
      early skip of rewriting module: numpy._typing._dtype_like [assertion]
      early skip of rewriting module: numpy._typing._nbit [assertion]
      early skip of rewriting module: numpy._typing._scalars [assertion]
      early skip of rewriting module: numpy._typing._ufunc [assertion]
      early skip of rewriting module: numpy.lib._twodim_base_impl [assertion]
      early skip of rewriting module: numpy.lib._stride_tricks_impl [assertion]
      early skip of rewriting module: numpy.lib.array_utils [assertion]
      early skip of rewriting module: numpy.lib._array_utils_impl [assertion]
      early skip of rewriting module: numpy.linalg._umath_linalg [assertion]
      early skip of rewriting module: numpy.linalg.linalg [assertion]
      early skip of rewriting module: numpy.lib._function_base_impl [assertion]
      early skip of rewriting module: numpy.lib._histograms_impl [assertion]
      early skip of rewriting module: numpy.lib.stride_tricks [assertion]
      early skip of rewriting module: numpy.lib._arraysetops_impl [assertion]
      early skip of rewriting module: numpy.lib._arrayterator_impl [assertion]
      early skip of rewriting module: numpy.lib._nanfunctions_impl [assertion]
      early skip of rewriting module: numpy.lib._npyio_impl [assertion]
      early skip of rewriting module: numpy.lib.format [assertion]
      early skip of rewriting module: numpy.lib._format_impl [assertion]
      early skip of rewriting module: numpy.lib._utils_impl [assertion]
      early skip of rewriting module: numpy.lib._datasource [assertion]
      early skip of rewriting module: numpy.lib._iotools [assertion]
      early skip of rewriting module: numpy.lib._polynomial_impl [assertion]
      early skip of rewriting module: numpy.lib._type_check_impl [assertion]
      early skip of rewriting module: numpy.lib._ufunclike_impl [assertion]
      early skip of rewriting module: numpy.lib._shape_base_impl [assertion]
      early skip of rewriting module: numpy.lib._version [assertion]
      early skip of rewriting module: numpy.lib.introspect [assertion]
      early skip of rewriting module: numpy.lib.mixins [assertion]
      early skip of rewriting module: numpy.lib.npyio [assertion]
      early skip of rewriting module: numpy.lib.scimath [assertion]
      early skip of rewriting module: numpy.lib._scimath_impl [assertion]
      early skip of rewriting module: numpy._array_api_info [assertion]
      early skip of rewriting module: matplotlib._c_internal_utils [assertion]
      early skip of rewriting module: matplotlib._docstring [assertion]
      early skip of rewriting module: matplotlib.rcsetup [assertion]
      early skip of rewriting module: matplotlib.backends [assertion]
      early skip of rewriting module: matplotlib.backends.registry [assertion]
      early skip of rewriting module: matplotlib.colors [assertion]
      early skip of rewriting module: PIL [assertion]
      early skip of rewriting module: PIL._version [assertion]
      early skip of rewriting module: PIL.Image [assertion]
      early skip of rewriting module: PIL.ExifTags [assertion]
      early skip of rewriting module: PIL.ImageMode [assertion]
      early skip of rewriting module: PIL._deprecate [assertion]
      early skip of rewriting module: PIL.TiffTags [assertion]
      early skip of rewriting module: PIL._binary [assertion]
      early skip of rewriting module: PIL._util [assertion]
      early skip of rewriting module: PIL._typing [assertion]
      early skip of rewriting module: defusedxml [assertion]
      early skip of rewriting module: PIL._imaging [assertion]
      early skip of rewriting module: PIL.PngImagePlugin [assertion]
      early skip of rewriting module: PIL.ImageChops [assertion]
      early skip of rewriting module: PIL.ImageFile [assertion]
      early skip of rewriting module: PIL.ImagePalette [assertion]
      early skip of rewriting module: PIL.GimpGradientFile [assertion]
      early skip of rewriting module: PIL.GimpPaletteFile [assertion]
      early skip of rewriting module: PIL.ImageColor [assertion]
      early skip of rewriting module: PIL.PaletteFile [assertion]
      early skip of rewriting module: PIL.ImageSequence [assertion]
      early skip of rewriting module: matplotlib._cm [assertion]
      early skip of rewriting module: matplotlib.scale [assertion]
      early skip of rewriting module: matplotlib.ticker [assertion]
      early skip of rewriting module: matplotlib.transforms [assertion]
      early skip of rewriting module: matplotlib._path [assertion]
      early skip of rewriting module: matplotlib.path [assertion]
      early skip of rewriting module: matplotlib.bezier [assertion]
      early skip of rewriting module: matplotlib._image [assertion]
      early skip of rewriting module: matplotlib._color_data [assertion]
      early skip of rewriting module: matplotlib._fontconfig_pattern [assertion]
      early skip of rewriting module: pyparsing [assertion]
      early skip of rewriting module: pyparsing.util [assertion]
      early skip of rewriting module: pyparsing.exceptions [assertion]
      early skip of rewriting module: pyparsing.unicode [assertion]
      early skip of rewriting module: pyparsing.actions [assertion]
      early skip of rewriting module: pyparsing.results [assertion]
      early skip of rewriting module: pyparsing.core [assertion]
      early skip of rewriting module: pyparsing.helpers [assertion]
      early skip of rewriting module: pyparsing.testing [assertion]
      early skip of rewriting module: pyparsing.common [assertion]
      early skip of rewriting module: matplotlib._enums [assertion]
      early skip of rewriting module: cycler [assertion]
      early skip of rewriting module: matplotlib.ft2font [assertion]
      early skip of rewriting module: dateutil [assertion]
      early skip of rewriting module: dateutil._version [assertion]
      early skip of rewriting module: kiwisolver [assertion]
      early skip of rewriting module: kiwisolver._cext [assertion]
      early skip of rewriting module: kiwisolver.exceptions [assertion]
      early skip of rewriting module: numpy.ma [assertion]
      early skip of rewriting module: numpy.ma.core [assertion]
      early skip of rewriting module: numpy.ma.extras [assertion]
      early skip of rewriting module: matplotlib.cm [assertion]
      early skip of rewriting module: matplotlib.colorizer [assertion]
      early skip of rewriting module: matplotlib.artist [assertion]
      early skip of rewriting module: matplotlib._cm_listed [assertion]
      early skip of rewriting module: matplotlib._cm_multivar [assertion]
      early skip of rewriting module: matplotlib._cm_bivar [assertion]
      early skip of rewriting module: matplotlib.dates [assertion]
      early skip of rewriting module: dateutil.rrule [assertion]
      early skip of rewriting module: six [assertion]
      early skip of rewriting module: six.moves [assertion]
      early skip of rewriting module: dateutil._common [assertion]
      early skip of rewriting module: dateutil.relativedelta [assertion]
      early skip of rewriting module: dateutil.parser [assertion]
      early skip of rewriting module: dateutil.parser._parser [assertion]
      early skip of rewriting module: dateutil.tz [assertion]
      early skip of rewriting module: dateutil.tz.tz [assertion]
      early skip of rewriting module: dateutil.tz._common [assertion]
      early skip of rewriting module: dateutil.tz._factories [assertion]
      early skip of rewriting module: dateutil.tz.win [assertion]
      early skip of rewriting module: dateutil.parser.isoparser [assertion]
      early skip of rewriting module: matplotlib.units [assertion]
      early skip of rewriting module: matplotlib.pyplot [assertion]
      early skip of rewriting module: matplotlib.colorbar [assertion]
      early skip of rewriting module: matplotlib.collections [assertion]
      early skip of rewriting module: matplotlib.hatch [assertion]
      early skip of rewriting module: matplotlib.lines [assertion]
      early skip of rewriting module: matplotlib.markers [assertion]
      early skip of rewriting module: matplotlib.contour [assertion]
      early skip of rewriting module: matplotlib.backend_bases [assertion]
      early skip of rewriting module: matplotlib.backend_tools [assertion]
      early skip of rewriting module: matplotlib._pylab_helpers [assertion]
      early skip of rewriting module: matplotlib.text [assertion]
      early skip of rewriting module: matplotlib.font_manager [assertion]
      early skip of rewriting module: plistlib [assertion]
      early skip of rewriting module: xml.parsers [assertion]
      early skip of rewriting module: xml.parsers.expat [assertion]
      early skip of rewriting module: matplotlib._afm [assertion]
      early skip of rewriting module: matplotlib._mathtext_data [assertion]
      early skip of rewriting module: matplotlib.patches [assertion]
      early skip of rewriting module: matplotlib.textpath [assertion]
      early skip of rewriting module: matplotlib._text_helpers [assertion]
      early skip of rewriting module: matplotlib.dviread [assertion]
      early skip of rewriting module: matplotlib.mathtext [assertion]
      early skip of rewriting module: matplotlib._mathtext [assertion]
      early skip of rewriting module: matplotlib.texmanager [assertion]
      early skip of rewriting module: matplotlib._tight_bbox [assertion]
      early skip of rewriting module: matplotlib.widgets [assertion]
      early skip of rewriting module: matplotlib.backend_managers [assertion]
      early skip of rewriting module: matplotlib.layout_engine [assertion]
      early skip of rewriting module: matplotlib._constrained_layout [assertion]
      early skip of rewriting module: matplotlib._layoutgrid [assertion]
      early skip of rewriting module: matplotlib._tight_layout [assertion]
      early skip of rewriting module: matplotlib.spines [assertion]
      early skip of rewriting module: matplotlib.image [assertion]
      early skip of rewriting module: matplotlib.style [assertion]
      early skip of rewriting module: matplotlib.style.core [assertion]
      early skip of rewriting module: matplotlib.figure [assertion]
      early skip of rewriting module: matplotlib._blocking_input [assertion]
      early skip of rewriting module: matplotlib.projections [assertion]
      early skip of rewriting module: matplotlib.axes [assertion]
      early skip of rewriting module: matplotlib.axes._base [assertion]
      early skip of rewriting module: matplotlib.offsetbox [assertion]
      early skip of rewriting module: matplotlib.axis [assertion]
      early skip of rewriting module: matplotlib.gridspec [assertion]
      early skip of rewriting module: matplotlib.table [assertion]
      early skip of rewriting module: matplotlib.axes._axes [assertion]
      early skip of rewriting module: matplotlib.category [assertion]
      early skip of rewriting module: matplotlib.inset [assertion]
      early skip of rewriting module: matplotlib.legend [assertion]
      early skip of rewriting module: matplotlib.container [assertion]
      early skip of rewriting module: matplotlib.legend_handler [assertion]
      early skip of rewriting module: matplotlib.mlab [assertion]
      early skip of rewriting module: matplotlib.quiver [assertion]
      early skip of rewriting module: matplotlib.stackplot [assertion]
      early skip of rewriting module: matplotlib.streamplot [assertion]
      early skip of rewriting module: matplotlib.tri [assertion]
      early skip of rewriting module: matplotlib.tri._triangulation [assertion]
      early skip of rewriting module: matplotlib.tri._tricontour [assertion]
      early skip of rewriting module: matplotlib.tri._trifinder [assertion]
      early skip of rewriting module: matplotlib.tri._triinterpolate [assertion]
      early skip of rewriting module: matplotlib.tri._tritools [assertion]
      early skip of rewriting module: matplotlib.tri._tripcolor [assertion]
      early skip of rewriting module: matplotlib.tri._triplot [assertion]
      early skip of rewriting module: matplotlib.tri._trirefine [assertion]
      early skip of rewriting module: matplotlib.axes._secondary_axes [assertion]
      early skip of rewriting module: matplotlib.projections.geo [assertion]
      early skip of rewriting module: matplotlib.projections.polar [assertion]
      early skip of rewriting module: mpl_toolkits [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.axes3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.art3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.proj3d [assertion]
      early skip of rewriting module: mpl_toolkits.mplot3d.axis3d [assertion]
      early skip of rewriting module: pandas [assertion]
      early skip of rewriting module: pytz [assertion]
      early skip of rewriting module: pytz.exceptions [assertion]
      early skip of rewriting module: pytz.lazy [assertion]
      early skip of rewriting module: pytz.tzinfo [assertion]
      early skip of rewriting module: pytz.tzfile [assertion]
      early skip of rewriting module: pandas.compat [assertion]
      early skip of rewriting module: pandas.compat._constants [assertion]
      early skip of rewriting module: pandas.compat.compressors [assertion]
      early skip of rewriting module: pandas.compat.numpy [assertion]
      early skip of rewriting module: pandas.util [assertion]
      early skip of rewriting module: pandas.util.version [assertion]
      early skip of rewriting module: pandas.compat.pyarrow [assertion]
      early skip of rewriting module: pyarrow [assertion]
      early skip of rewriting module: pandas._config [assertion]
      early skip of rewriting module: pandas._config.config [assertion]
      early skip of rewriting module: pandas._typing [assertion]
      early skip of rewriting module: numpy.random [assertion]
      early skip of rewriting module: numpy.random._bounded_integers [assertion]
      early skip of rewriting module: numpy.random.bit_generator [assertion]
      early skip of rewriting module: numpy.random._common [assertion]
      early skip of rewriting module: secrets [assertion]
      early skip of rewriting module: numpy.random._pickle [assertion]
      early skip of rewriting module: numpy.random._generator [assertion]
      early skip of rewriting module: numpy.random._pcg64 [assertion]
      early skip of rewriting module: numpy.random._mt19937 [assertion]
      early skip of rewriting module: numpy.random._philox [assertion]
      early skip of rewriting module: numpy.random._sfc64 [assertion]
      early skip of rewriting module: numpy.random.mtrand [assertion]
      early skip of rewriting module: pandas.util._exceptions [assertion]
      early skip of rewriting module: pandas._config.dates [assertion]
      early skip of rewriting module: pandas._config.display [assertion]
      early skip of rewriting module: pandas.core [assertion]
      early skip of rewriting module: pandas.core.config_init [assertion]
      early skip of rewriting module: pandas.core.api [assertion]
      early skip of rewriting module: pandas._libs [assertion]
      early skip of rewriting module: pandas._libs.pandas_parser [assertion]
      early skip of rewriting module: pandas._libs.pandas_datetime [assertion]
      early skip of rewriting module: pandas._libs.interval [assertion]
      early skip of rewriting module: pandas._libs.hashtable [assertion]
      early skip of rewriting module: pandas._libs.missing [assertion]
      early skip of rewriting module: pandas._libs.tslibs [assertion]
      early skip of rewriting module: pandas._libs.tslibs.dtypes [assertion]
      early skip of rewriting module: pandas._libs.tslibs.ccalendar [assertion]
      early skip of rewriting module: pandas._libs.tslibs.np_datetime [assertion]
      early skip of rewriting module: pandas._libs.tslibs.conversion [assertion]
      early skip of rewriting module: pandas._libs.tslibs.base [assertion]
      early skip of rewriting module: pandas._libs.tslibs.offsets [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timestamps [assertion]
      early skip of rewriting module: pandas._libs.tslibs.nattype [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timedeltas [assertion]
      early skip of rewriting module: pandas._libs.tslibs.timezones [assertion]
      early skip of rewriting module: pandas.compat._optional [assertion]
      early skip of rewriting module: pandas._libs.tslibs.fields [assertion]
      early skip of rewriting module: _strptime [assertion]
      early skip of rewriting module: pandas._config.localization [assertion]
      early skip of rewriting module: pandas._libs.tslibs.tzconversion [assertion]
      early skip of rewriting module: pandas._libs.properties [assertion]
      early skip of rewriting module: pandas._libs.tslibs.parsing [assertion]
      early skip of rewriting module: pandas._libs.tslibs.strptime [assertion]
      early skip of rewriting module: pandas._libs.tslibs.period [assertion]
      early skip of rewriting module: pandas._libs.tslibs.vectorized [assertion]
      early skip of rewriting module: pandas._libs.ops_dispatch [assertion]
      early skip of rewriting module: pandas._libs.algos [assertion]
      early skip of rewriting module: pandas.core.dtypes [assertion]
      early skip of rewriting module: pandas.core.dtypes.dtypes [assertion]
      early skip of rewriting module: pandas._libs.lib [assertion]
      early skip of rewriting module: pyarrow [assertion]
      early skip of rewriting module: pandas.errors [assertion]
      early skip of rewriting module: pandas.core.dtypes.base [assertion]
      early skip of rewriting module: pandas.core.dtypes.generic [assertion]
      early skip of rewriting module: pandas.core.dtypes.inference [assertion]
      early skip of rewriting module: pandas.core.dtypes.missing [assertion]
      early skip of rewriting module: pandas.core.dtypes.common [assertion]
      early skip of rewriting module: pandas.core.algorithms [assertion]
      early skip of rewriting module: pandas.util._decorators [assertion]
      early skip of rewriting module: pandas.core.dtypes.cast [assertion]
      early skip of rewriting module: pandas.io [assertion]
      early skip of rewriting module: pandas.io._util [assertion]
      early skip of rewriting module: pandas.core.dtypes.concat [assertion]
      early skip of rewriting module: pandas.core.dtypes.astype [assertion]
      early skip of rewriting module: pandas.core.array_algos [assertion]
      early skip of rewriting module: pandas.core.array_algos.take [assertion]
      early skip of rewriting module: pandas.core.construction [assertion]
      early skip of rewriting module: pandas.core.common [assertion]
      early skip of rewriting module: pandas.core.indexers [assertion]
      early skip of rewriting module: pandas.core.indexers.utils [assertion]
      early skip of rewriting module: pandas.core.arrays [assertion]
      early skip of rewriting module: pandas.core.arrays.arrow [assertion]
      early skip of rewriting module: pandas.core.arrays.arrow.accessors [assertion]
      early skip of rewriting module: pandas.core.arrays.arrow.array [assertion]
      early skip of rewriting module: pandas.util._validators [assertion]
      early skip of rewriting module: pandas.core.missing [assertion]
      early skip of rewriting module: pandas.core.ops [assertion]
      early skip of rewriting module: pandas.core.ops.array_ops [assertion]
      early skip of rewriting module: pandas._libs.ops [assertion]
      early skip of rewriting module: pandas.core.roperator [assertion]
      early skip of rewriting module: pandas.core.computation [assertion]
      early skip of rewriting module: pandas.core.computation.expressions [assertion]
      early skip of rewriting module: pandas.core.computation.check [assertion]
      early skip of rewriting module: numexpr [assertion]
      early skip of rewriting module: pandas.core.ops.missing [assertion]
      early skip of rewriting module: pandas.core.ops.dispatch [assertion]
      early skip of rewriting module: pandas.core.ops.invalid [assertion]
      early skip of rewriting module: pandas.core.ops.common [assertion]
      early skip of rewriting module: pandas.core.ops.docstrings [assertion]
      early skip of rewriting module: pandas.core.ops.mask_ops [assertion]
      early skip of rewriting module: pandas.core.arraylike [assertion]
      early skip of rewriting module: pandas.core.arrays._arrow_string_mixins [assertion]
      early skip of rewriting module: pandas.core.arrays._utils [assertion]
      early skip of rewriting module: pandas.core.arrays.base [assertion]
      early skip of rewriting module: pandas.compat.numpy.function [assertion]
      early skip of rewriting module: pandas.core.array_algos.quantile [assertion]
      early skip of rewriting module: pandas.core.sorting [assertion]
      early skip of rewriting module: pandas.core.arrays.masked [assertion]
      early skip of rewriting module: pandas.core.nanops [assertion]
      early skip of rewriting module: bottleneck [assertion]
      early skip of rewriting module: pandas.core.array_algos.masked_accumulations [assertion]
      early skip of rewriting module: pandas.core.array_algos.masked_reductions [assertion]
      early skip of rewriting module: pandas.core.util [assertion]
      early skip of rewriting module: pandas.core.util.hashing [assertion]
      early skip of rewriting module: pandas._libs.hashing [assertion]
      early skip of rewriting module: pandas.core.arrays.string_ [assertion]
      early skip of rewriting module: pandas._libs.arrays [assertion]
      early skip of rewriting module: pandas.core.arrays.floating [assertion]
      early skip of rewriting module: pandas.core.arrays.numeric [assertion]
      early skip of rewriting module: pandas.core.arrays.integer [assertion]
      early skip of rewriting module: pandas.core.arrays.numpy_ [assertion]
      early skip of rewriting module: pandas.core.arrays._mixins [assertion]
      early skip of rewriting module: pandas.core.array_algos.transforms [assertion]
      early skip of rewriting module: pandas.core.strings [assertion]
      early skip of rewriting module: pandas.core.strings.object_array [assertion]
      early skip of rewriting module: pandas.core.strings.base [assertion]
      early skip of rewriting module: pandas.io.formats [assertion]
      early skip of rewriting module: pandas.io.formats.printing [assertion]
      early skip of rewriting module: pandas.io.formats.console [assertion]
      early skip of rewriting module: pandas.tseries [assertion]
      early skip of rewriting module: pandas.tseries.frequencies [assertion]
      early skip of rewriting module: pandas.core.arrays.boolean [assertion]
      early skip of rewriting module: pandas.core.arrays.categorical [assertion]
      early skip of rewriting module: pandas.core.accessor [assertion]
      early skip of rewriting module: pandas.core.base [assertion]
      early skip of rewriting module: pandas.core.arrays.datetimes [assertion]
      early skip of rewriting module: pandas._libs.tslib [assertion]
      early skip of rewriting module: pandas.core.arrays.datetimelike [assertion]
      early skip of rewriting module: pandas.core.array_algos.datetimelike_accumulations [assertion]
      early skip of rewriting module: pandas.core.arrays._ranges [assertion]
      early skip of rewriting module: pandas.tseries.offsets [assertion]
      early skip of rewriting module: pandas.core.arrays.interval [assertion]
      early skip of rewriting module: pandas.core.arrays.timedeltas [assertion]
      early skip of rewriting module: pandas.core.arrays.period [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.accessor [assertion]
      early skip of rewriting module: pandas.core.arrays.sparse.array [assertion]
      early skip of rewriting module: pandas._libs.sparse [assertion]
      early skip of rewriting module: pandas.core.arrays.string_arrow [assertion]
      early skip of rewriting module: pandas.core.flags [assertion]
      early skip of rewriting module: pandas.core.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.generic [assertion]
      early skip of rewriting module: pandas.core.apply [assertion]
      early skip of rewriting module: pandas._libs.internals [assertion]
      early skip of rewriting module: pandas.core._numba [assertion]
      early skip of rewriting module: pandas.core._numba.executor [assertion]
      early skip of rewriting module: pandas.core.frame [assertion]
      early skip of rewriting module: pandas.core.generic [assertion]
      early skip of rewriting module: pandas.core.indexing [assertion]
      early skip of rewriting module: pandas._libs.indexing [assertion]
      early skip of rewriting module: pandas.core.indexes [assertion]
      early skip of rewriting module: pandas.core.indexes.api [assertion]
      early skip of rewriting module: pandas.core.indexes.base [assertion]
      early skip of rewriting module: pandas._libs.index [assertion]
      early skip of rewriting module: pandas._libs.writers [assertion]
      early skip of rewriting module: pandas._libs.join [assertion]
      early skip of rewriting module: pandas.core.array_algos.putmask [assertion]
      early skip of rewriting module: pandas.core.indexes.frozen [assertion]
      early skip of rewriting module: pandas.core.strings.accessor [assertion]
      early skip of rewriting module: pandas.core.indexes.category [assertion]
      early skip of rewriting module: pandas.core.indexes.extension [assertion]
      early skip of rewriting module: pandas.core.indexes.datetimes [assertion]
      early skip of rewriting module: pandas.core.indexes.datetimelike [assertion]
      early skip of rewriting module: pandas.core.indexes.range [assertion]
      early skip of rewriting module: pandas.core.tools [assertion]
      early skip of rewriting module: pandas.core.tools.timedeltas [assertion]
      early skip of rewriting module: pandas.core.tools.times [assertion]
      early skip of rewriting module: pandas.core.indexes.interval [assertion]
      early skip of rewriting module: pandas.core.indexes.multi [assertion]
      early skip of rewriting module: pandas.core.indexes.timedeltas [assertion]
      early skip of rewriting module: pandas.core.indexes.period [assertion]
      early skip of rewriting module: pandas.core.sample [assertion]
      early skip of rewriting module: pandas.core.array_algos.replace [assertion]
      early skip of rewriting module: pandas.core.internals [assertion]
      early skip of rewriting module: pandas.core.internals.api [assertion]
      early skip of rewriting module: pandas.core.internals.blocks [assertion]
      early skip of rewriting module: pandas.core.internals.array_manager [assertion]
      early skip of rewriting module: pandas.core.internals.base [assertion]
      early skip of rewriting module: pandas.core.internals.managers [assertion]
      early skip of rewriting module: pandas.core.internals.ops [assertion]
      early skip of rewriting module: pandas.core.internals.concat [assertion]
      early skip of rewriting module: pandas.core.internals.construction [assertion]
      early skip of rewriting module: pandas.core.methods [assertion]
      early skip of rewriting module: pandas.core.methods.describe [assertion]
      early skip of rewriting module: pandas.core.reshape [assertion]
      early skip of rewriting module: pandas.core.reshape.concat [assertion]
      early skip of rewriting module: pandas.io.formats.format [assertion]
      early skip of rewriting module: pandas.io.common [assertion]
      early skip of rewriting module: tarfile [assertion]
      early skip of rewriting module: pwd [assertion]
      early skip of rewriting module: grp [assertion]
      early skip of rewriting module: pandas.core.shared_docs [assertion]
      early skip of rewriting module: pandas.core.window [assertion]
      early skip of rewriting module: pandas.core.window.ewm [assertion]
      early skip of rewriting module: pandas._libs.window [assertion]
      early skip of rewriting module: pandas._libs.window.aggregations [assertion]
      early skip of rewriting module: pandas.core.indexers.objects [assertion]
      early skip of rewriting module: pandas._libs.window.indexers [assertion]
      early skip of rewriting module: pandas.core.util.numba_ [assertion]
      early skip of rewriting module: pandas.core.window.common [assertion]
      early skip of rewriting module: pandas.core.window.doc [assertion]
      early skip of rewriting module: pandas.core.window.numba_ [assertion]
      early skip of rewriting module: pandas.core.window.online [assertion]
      early skip of rewriting module: pandas.core.window.rolling [assertion]
      early skip of rewriting module: pandas.core.window.expanding [assertion]
      early skip of rewriting module: pandas.core.methods.selectn [assertion]
      early skip of rewriting module: pandas.core.reshape.melt [assertion]
      early skip of rewriting module: pandas.core.reshape.util [assertion]
      early skip of rewriting module: pandas.core.tools.numeric [assertion]
      early skip of rewriting module: pandas.core.series [assertion]
      early skip of rewriting module: pandas._libs.reshape [assertion]
      early skip of rewriting module: pandas.core.indexes.accessors [assertion]
      early skip of rewriting module: pandas.core.tools.datetimes [assertion]
      early skip of rewriting module: pandas.arrays [assertion]
      early skip of rewriting module: pandas.io.formats.info [assertion]
      early skip of rewriting module: pandas.plotting [assertion]
      early skip of rewriting module: pandas.plotting._core [assertion]
      early skip of rewriting module: pandas.plotting._misc [assertion]
      early skip of rewriting module: pandas.core.groupby.base [assertion]
      early skip of rewriting module: pandas.core.groupby.ops [assertion]
      early skip of rewriting module: pandas._libs.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.grouper [assertion]
      early skip of rewriting module: pandas.core.groupby.categorical [assertion]
      early skip of rewriting module: pandas.core.groupby.groupby [assertion]
      early skip of rewriting module: pandas.core.groupby.numba_ [assertion]
      early skip of rewriting module: pandas.core.groupby.indexing [assertion]
      early skip of rewriting module: pandas.tseries.api [assertion]
      early skip of rewriting module: pandas.core.computation.api [assertion]
      early skip of rewriting module: pandas.core.computation.eval [assertion]
      early skip of rewriting module: pandas.core.computation.engines [assertion]
      early skip of rewriting module: pandas.core.computation.align [assertion]
      early skip of rewriting module: pandas.core.computation.common [assertion]
      early skip of rewriting module: pandas.core.computation.ops [assertion]
      early skip of rewriting module: pandas.core.computation.scope [assertion]
      early skip of rewriting module: pandas.core.computation.expr [assertion]
      early skip of rewriting module: pandas.core.computation.parsing [assertion]
      early skip of rewriting module: pandas.core.reshape.api [assertion]
      early skip of rewriting module: pandas.core.reshape.encoding [assertion]
      early skip of rewriting module: pandas.core.reshape.merge [assertion]
      early skip of rewriting module: pandas.core.reshape.pivot [assertion]
      early skip of rewriting module: pandas.core.reshape.tile [assertion]
      early skip of rewriting module: pandas.api [assertion]
      early skip of rewriting module: pandas.api.extensions [assertion]
      early skip of rewriting module: pandas.api.indexers [assertion]
      early skip of rewriting module: pandas.api.interchange [assertion]
      early skip of rewriting module: pandas.core.interchange [assertion]
      early skip of rewriting module: pandas.core.interchange.dataframe_protocol [assertion]
      early skip of rewriting module: pandas.core.interchange.from_dataframe [assertion]
      early skip of rewriting module: pandas.core.interchange.utils [assertion]
      early skip of rewriting module: pandas.api.types [assertion]
      early skip of rewriting module: pandas.core.dtypes.api [assertion]
      early skip of rewriting module: pandas.api.typing [assertion]
      early skip of rewriting module: pandas.core.resample [assertion]
      early skip of rewriting module: pandas.io.json [assertion]
      early skip of rewriting module: pandas.io.json._json [assertion]
      early skip of rewriting module: pandas._libs.json [assertion]
      early skip of rewriting module: pandas.io.json._normalize [assertion]
      early skip of rewriting module: pandas.io.json._table_schema [assertion]
      early skip of rewriting module: pandas.io.parsers [assertion]
      early skip of rewriting module: pandas.io.parsers.readers [assertion]
      early skip of rewriting module: pandas._libs.parsers [assertion]
      early skip of rewriting module: pandas.io.parsers.arrow_parser_wrapper [assertion]
      early skip of rewriting module: pandas.io.parsers.base_parser [assertion]
      early skip of rewriting module: pandas.io.parsers.c_parser_wrapper [assertion]
      early skip of rewriting module: pandas.io.parsers.python_parser [assertion]
      early skip of rewriting module: pandas.io.stata [assertion]
      early skip of rewriting module: pandas.testing [assertion]
      early skip of rewriting module: pandas._testing [assertion]
      early skip of rewriting module: pandas._testing._io [assertion]
      early skip of rewriting module: pandas._testing.contexts [assertion]
      early skip of rewriting module: pandas._testing._warnings [assertion]
      early skip of rewriting module: pandas._testing.asserters [assertion]
      early skip of rewriting module: pandas._libs.testing [assertion]
      early skip of rewriting module: cmath [assertion]
      early skip of rewriting module: pandas._testing.compat [assertion]
      early skip of rewriting module: pandas.util._print_versions [assertion]
      early skip of rewriting module: pandas.io.api [assertion]
      early skip of rewriting module: pandas.io.clipboards [assertion]
      early skip of rewriting module: pandas.io.excel [assertion]
      early skip of rewriting module: pandas.io.excel._base [assertion]
      early skip of rewriting module: pandas.io.excel._util [assertion]
      early skip of rewriting module: pandas.io.excel._calamine [assertion]
      early skip of rewriting module: pandas.io.excel._odfreader [assertion]
      early skip of rewriting module: pandas.io.excel._openpyxl [assertion]
      early skip of rewriting module: pandas.io.excel._pyxlsb [assertion]
      early skip of rewriting module: pandas.io.excel._xlrd [assertion]
      early skip of rewriting module: pandas.io.excel._odswriter [assertion]
      early skip of rewriting module: pandas.io.excel._xlsxwriter [assertion]
      early skip of rewriting module: pandas.io.feather_format [assertion]
      early skip of rewriting module: pandas.io.gbq [assertion]
      early skip of rewriting module: pandas.io.html [assertion]
      early skip of rewriting module: pandas.io.orc [assertion]
      early skip of rewriting module: pandas.io.parquet [assertion]
      early skip of rewriting module: pandas.io.pickle [assertion]
      early skip of rewriting module: pandas.compat.pickle_compat [assertion]
      early skip of rewriting module: pandas.io.pytables [assertion]
      early skip of rewriting module: pandas.core.computation.pytables [assertion]
      early skip of rewriting module: pandas.io.sas [assertion]
      early skip of rewriting module: pandas.io.sas.sasreader [assertion]
      early skip of rewriting module: pandas.io.spss [assertion]
      early skip of rewriting module: pandas.io.sql [assertion]
      early skip of rewriting module: pandas.io.xml [assertion]
      early skip of rewriting module: pandas.util._tester [assertion]
      early skip of rewriting module: pandas._version_meson [assertion]
      early skip of rewriting module: statistics [assertion]
      early skip of rewriting module: _statistics [assertion]
      early skip of rewriting module: mplfinance._utils [assertion]
      early skip of rewriting module: mplfinance._arg_validators [assertion]
      early skip of rewriting module: mplfinance._helpers [assertion]
      early skip of rewriting module: mplfinance._styles [assertion]
      early skip of rewriting module: mplfinance._styledata [assertion]
      early skip of rewriting module: mplfinance._styledata.default [assertion]
      early skip of rewriting module: mplfinance._styledata.nightclouds [assertion]
      early skip of rewriting module: mplfinance._styledata.classic [assertion]
      early skip of rewriting module: mplfinance._styledata.mike [assertion]
      early skip of rewriting module: mplfinance._styledata.charles [assertion]
      early skip of rewriting module: mplfinance._styledata.blueskies [assertion]
      early skip of rewriting module: mplfinance._styledata.starsandstripes [assertion]
      early skip of rewriting module: mplfinance._styledata.sas [assertion]
      early skip of rewriting module: mplfinance._styledata.brasil [assertion]
      early skip of rewriting module: mplfinance._styledata.yahoo [assertion]
      early skip of rewriting module: mplfinance._styledata.checkers [assertion]
      early skip of rewriting module: mplfinance._styledata.binance [assertion]
      early skip of rewriting module: mplfinance._styledata.kenan [assertion]
      early skip of rewriting module: mplfinance._styledata.ibd [assertion]
      early skip of rewriting module: mplfinance._styledata.binancedark [assertion]
      early skip of rewriting module: mplfinance._styledata.tradingview [assertion]
      early skip of rewriting module: mplfinance._widths [assertion]
      early skip of rewriting module: mplfinance._panels [assertion]
      early skip of rewriting module: mplfinance._version [assertion]
      early skip of rewriting module: mplfinance._mplwraps [assertion]
      early skip of rewriting module: mplfinance._kwarg_help [assertion]
      early skip of rewriting module: src.ultibot_ui.workers [assertion]
      early skip of rewriting module: matplotlib.backends.backend_qtagg [assertion]
      early skip of rewriting module: matplotlib.backends.qt_compat [assertion]
      early skip of rewriting module: matplotlib.backends.backend_agg [assertion]
      early skip of rewriting module: matplotlib.backends._backend_agg [assertion]
      early skip of rewriting module: matplotlib.backends.backend_qt [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor.figureoptions [assertion]
      early skip of rewriting module: matplotlib.backends.qt_editor._formlayout [assertion]
      early skip of rewriting module: src.ultibot_ui.widgets.notification_widget [assertion]
      early skip of rewriting module: src.ultibot_ui.widgets.portfolio_widget [assertion]
      early skip of rewriting module: src.ultibot_ui.windows.history_view [assertion]
      early skip of rewriting module: src.ultibot_ui.widgets.paper_trading_report_widget [assertion]
      early skip of rewriting module: src.ultibot_ui.windows.settings_view [assertion]
      early skip of rewriting module: src.ultibot_ui.services.ui_strategy_service [assertion]
      early skip of rewriting module: src.ultibot_ui.views [assertion]
      early skip of rewriting module: src.ultibot_ui.views.strategies_view [assertion]
      early skip of rewriting module: src.ultibot_ui.views.opportunities_view [assertion]
      early skip of rewriting module: src.ultibot_ui.views.portfolio_view [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: QApplication
            obj: <class 'PySide6.QtWidgets.QApplication'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: QMessageBox
            obj: <class 'PySide6.QtWidgets.QMessageBox'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: QTimer
            obj: <class 'PySide6.QtCore.QTimer'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: start_application
            obj: <function start_application at 0x000001F9B9173CE0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: qapp
            obj: <pytest_fixture(<function qapp at 0x000001F98E3EFBA0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_main_ui.py>
            name: test_start_application_success
            obj: <function test_start_application_success at 0x000001F98E80FCE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BAC3D990>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_start_application_success>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/ui/unit/test_main_ui.py' lenresult=1 outcome='passed'> [hook]
    genitems <Coroutine test_start_application_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_start_application_success>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/ui/unit/test_main_ui.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/ui/unit' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/ui' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir unit> [collection]
      pytest_collectstart [hook]
          collector: <Dir unit>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir unit>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters
            parent: <Dir unit>
        finish pytest_collect_directory --> <Dir adapters> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\core
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\core
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\core
            parent: <Dir unit>
        finish pytest_collect_directory --> <Dir core> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services
            parent: <Dir unit>
        finish pytest_collect_directory --> <Dir services> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared
            parent: <Dir unit>
        finish pytest_collect_directory --> <Dir shared> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\strategies
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\strategies
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\strategies
            parent: <Dir unit>
        finish pytest_collect_directory --> <Dir strategies> [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir unit>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir unit>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py
          finish pytest_pycollect_makemodule --> <Module test_app_config.py> [hook]
        finish pytest_collect_file --> [<Module test_app_config.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir unit>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir unit>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py
          finish pytest_pycollect_makemodule --> <Module test_autonomous_strategies.py> [hook]
        finish pytest_collect_file --> [<Module test_autonomous_strategies.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir unit>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir unit>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py
          finish pytest_pycollect_makemodule --> <Module test_hello_world.py> [hook]
        finish pytest_collect_file --> [<Module test_hello_world.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\ui
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\ui
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\ui
            parent: <Dir unit>
        finish pytest_collect_directory --> <Dir ui> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit' lenresult=9 outcome='passed'> [hook]
    genitems <Dir adapters> [collection]
      pytest_collectstart [hook]
          collector: <Dir adapters>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir adapters>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir adapters>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir adapters>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py
          finish pytest_pycollect_makemodule --> <Module test_binance_adapter.py> [hook]
        finish pytest_collect_file --> [<Module test_binance_adapter.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir adapters>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir adapters>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py
          finish pytest_pycollect_makemodule --> <Module test_persistence_service.py> [hook]
        finish pytest_collect_file --> [<Module test_persistence_service.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/adapters' lenresult=2 outcome='passed'> [hook]
    genitems <Module test_binance_adapter.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_binance_adapter.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_binance_adapter.py>
      find_module called for: test_binance_adapter [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\adapters\\test_binance_adapter.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_binance_adapter.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: httpx
            obj: <module 'httpx' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\httpx\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: pytest_asyncio
            obj: <module 'pytest_asyncio' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: BinanceAPIError
            obj: <class 'src.ultibot_backend.core.exceptions.BinanceAPIError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: AssetBalance
            obj: <class 'src.shared.data_types.AssetBalance'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: binance_adapter
            obj: <pytest_fixture(<function binance_adapter at 0x000001F9BBBCAF20>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_get_account_info_success
            obj: <function test_get_account_info_success at 0x000001F9BBBCAFC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBE8450>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_account_info_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_get_account_info_api_error
            obj: <function test_get_account_info_api_error at 0x000001F9BBBCB060>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBE8AD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_account_info_api_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_get_spot_balances_success
            obj: <function test_get_spot_balances_success at 0x000001F9BBBCB100>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBE9390>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_spot_balances_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_get_spot_balances_parsing_error
            obj: <function test_get_spot_balances_parsing_error at 0x000001F9BBBCB1A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBE9E50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_spot_balances_parsing_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_make_request_get_success
            obj: <function test_make_request_get_success at 0x000001F9BBBCB380>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBEA4D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_make_request_get_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_make_request_retry_on_5xx_then_success
            obj: <function test_make_request_retry_on_5xx_then_success at 0x000001F9BBBCB560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBEAC90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_make_request_retry_on_5xx_then_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_make_request_fail_after_retries_on_5xx
            obj: <function test_make_request_fail_after_retries_on_5xx at 0x000001F9BBBCB740>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBEB490>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_make_request_fail_after_retries_on_5xx>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_binance_adapter.py>
            name: test_make_request_client_error_no_retry
            obj: <function test_make_request_client_error_no_retry at 0x000001F9BBBCB920>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBBEBC90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_make_request_client_error_no_retry>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/adapters/test_binance_adapter.py' lenresult=8 outcome='passed'> [hook]
    genitems <Coroutine test_get_account_info_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_account_info_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_account_info_api_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_account_info_api_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_spot_balances_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_spot_balances_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_spot_balances_parsing_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_spot_balances_parsing_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_make_request_get_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_make_request_get_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_make_request_retry_on_5xx_then_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_make_request_retry_on_5xx_then_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_make_request_fail_after_retries_on_5xx> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_make_request_fail_after_retries_on_5xx>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_make_request_client_error_no_retry> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_make_request_client_error_no_retry>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/adapters/test_binance_adapter.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_persistence_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_persistence_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_persistence_service.py>
      find_module called for: test_persistence_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\adapters\\test_persistence_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\adapters\test_persistence_service.py [assertion]
      early skip of rewriting module: asyncpg [assertion]
      early skip of rewriting module: asyncpg.connection [assertion]
      early skip of rewriting module: asyncpg.compat [assertion]
      early skip of rewriting module: asyncpg._asyncio_compat [assertion]
      early skip of rewriting module: asyncpg.connect_utils [assertion]
      early skip of rewriting module: asyncpg.exceptions [assertion]
      early skip of rewriting module: asyncpg.exceptions._base [assertion]
      early skip of rewriting module: asyncpg.protocol [assertion]
      early skip of rewriting module: asyncpg.protocol.protocol [assertion]
      early skip of rewriting module: asyncpg.pgproto [assertion]
      early skip of rewriting module: asyncpg.pgproto.pgproto [assertion]
      early skip of rewriting module: asyncpg.pgproto.types [assertion]
      early skip of rewriting module: backports_abc [assertion]
      early skip of rewriting module: asyncpg.types [assertion]
      early skip of rewriting module: asyncpg.cursor [assertion]
      early skip of rewriting module: asyncpg.connresource [assertion]
      early skip of rewriting module: asyncpg.introspection [assertion]
      early skip of rewriting module: asyncpg.prepared_stmt [assertion]
      early skip of rewriting module: asyncpg.serverversion [assertion]
      early skip of rewriting module: asyncpg.transaction [assertion]
      early skip of rewriting module: asyncpg.utils [assertion]
      early skip of rewriting module: asyncpg.pool [assertion]
      early skip of rewriting module: asyncpg._version [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: Dict
            obj: typing.Dict
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: Any
            obj: typing.Any
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: asyncpg
            obj: <module 'asyncpg' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\asyncpg\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: SQL
            obj: <class 'psycopg.sql.SQL'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: Literal
            obj: <class 'psycopg.sql.Literal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: settings
            obj: SUPABASE_URL='https://ryfkuilvlbuzaxniqxwx.supabase.co' SUPABASE_ANON_KEY='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5Zmt1aWx2bGJ1emF4bmlxeHd4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1NTQ3NjcsImV4cCI6MjA2NDEzMDc2N30.yfiaaESvkwQCkKbfm9ZbWX6jCJLAAvLqksj4rUQ7xjA' SUPABASE_SERVICE_ROLE_KEY='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJ5Zmt1aWx2bGJ1emF4bmlxeHd4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODU1NDc2NywiZXhwIjoyMDY0MTMwNzY3fQ.J5t8DPEFMvpEWJVgWYv2xJmKNWFyfJYEZpNEZrO8mVw' DATABASE_URL='sqlite:///./ultibot_local.db' CREDENTIAL_ENCRYPTION_KEY='m-28Nzt6UpR8G9AiQWNGqh0X3on5mYcxPjlHKKXzjoM=' BINANCE_API_KEY='demo_api_key' BINANCE_API_SECRET='demo_api_secret' MOBULA_API_KEY=None LOG_LEVEL='INFO' FIXED_USER_ID=UUID('00000000-0000-0000-0000-000000000001') FIXED_BINANCE_CREDENTIAL_ID=UUID('00000000-0000-0000-0000-000000000002') GEMINI_API_KEY='demo_gemini_key' BACKEND_HOST='127.0.0.1' BACKEND_PORT=8000 DEBUG_MODE=False
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: APICredential
            obj: <class 'src.shared.data_types.APICredential'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: ServiceName
            obj: <enum 'ServiceName'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: PropertyMock
            obj: <class 'unittest.mock.PropertyMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: mock_asyncpg_connection
            obj: <pytest_fixture(<function mock_asyncpg_connection at 0x000001F9BBC380E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: persistence_service
            obj: <pytest_fixture(<function persistence_service at 0x000001F9BBD15B20>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: fixed_user_id
            obj: <pytest_fixture(<function fixed_user_id at 0x000001F9BBD159E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_get_user_configuration_found
            obj: <function test_get_user_configuration_found at 0x000001F9BBD15BC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBCCAB90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_user_configuration_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_get_user_configuration_not_found
            obj: <function test_get_user_configuration_not_found at 0x000001F9BBD15C60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD31510>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_user_configuration_not_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_get_user_configuration_db_error
            obj: <function test_get_user_configuration_db_error at 0x000001F9BBD15D00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD31CD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_user_configuration_db_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_upsert_user_configuration_insert
            obj: <function test_upsert_user_configuration_insert at 0x000001F9BBD15DA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD32710>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_upsert_user_configuration_insert>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_upsert_user_configuration_update
            obj: <function test_upsert_user_configuration_update at 0x000001F9BBD15E40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD32E10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_upsert_user_configuration_update>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_upsert_user_configuration_db_error
            obj: <function test_upsert_user_configuration_db_error at 0x000001F9BBD15EE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD33650>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_upsert_user_configuration_db_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_persistence_service.py>
            name: test_save_credential
            obj: <function test_save_credential at 0x000001F9BBD15F80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD33E50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_save_credential>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/adapters/test_persistence_service.py' lenresult=7 outcome='passed'> [hook]
    genitems <Coroutine test_get_user_configuration_found> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_user_configuration_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_user_configuration_not_found> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_user_configuration_not_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_user_configuration_db_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_user_configuration_db_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_upsert_user_configuration_insert> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_upsert_user_configuration_insert>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_upsert_user_configuration_update> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_upsert_user_configuration_update>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_upsert_user_configuration_db_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_upsert_user_configuration_db_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_save_credential> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_save_credential>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/adapters/test_persistence_service.py' lenresult=7 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/adapters' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir core> [collection]
      pytest_collectstart [hook]
          collector: <Dir core>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir core>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\core\domain_models
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\core\domain_models
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_directory [hook]
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\core\domain_models
            parent: <Dir core>
        finish pytest_collect_directory --> <Dir domain_models> [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/core' lenresult=1 outcome='passed'> [hook]
    genitems <Dir domain_models> [collection]
      pytest_collectstart [hook]
          collector: <Dir domain_models>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir domain_models>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\core\domain_models\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\core\domain_models\__pycache__
        finish pytest_ignore_collect --> True [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/core/domain_models' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/core/domain_models' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/core' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir services> [collection]
      pytest_collectstart [hook]
          collector: <Dir services>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir services>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py
          finish pytest_pycollect_makemodule --> <Module test_ai_orchestrator_service.py> [hook]
        finish pytest_collect_file --> [<Module test_ai_orchestrator_service.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py
          finish pytest_pycollect_makemodule --> <Module test_config_service.py> [hook]
        finish pytest_collect_file --> [<Module test_config_service.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py
          finish pytest_pycollect_makemodule --> <Module test_credential_service.py> [hook]
        finish pytest_collect_file --> [<Module test_credential_service.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py
          finish pytest_pycollect_makemodule --> <Module test_market_data_service.py> [hook]
        finish pytest_collect_file --> [<Module test_market_data_service.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py
          finish pytest_pycollect_makemodule --> <Module test_performance_service.py> [hook]
        finish pytest_collect_file --> [<Module test_performance_service.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py
          finish pytest_pycollect_makemodule --> <Module test_trading_engine_capital_management.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_engine_capital_management.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py
          finish pytest_pycollect_makemodule --> <Module test_trading_engine_service.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_engine_service.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py
          finish pytest_pycollect_makemodule --> <Module test_trading_engine_service_corrected.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_engine_service_corrected.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py
          finish pytest_pycollect_makemodule --> <Module test_trading_engine_story_5_4.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_engine_story_5_4.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py
          finish pytest_pycollect_makemodule --> <Module test_trading_mode_basic.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_mode_basic.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.bak
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.bak
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.bak
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.bak
        finish pytest_collect_file --> [] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py
          finish pytest_pycollect_makemodule --> <Module test_trading_mode_state.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_mode_state.py>] [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir services>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir services>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py
          finish pytest_pycollect_makemodule --> <Module test_trading_report_service.py> [hook]
        finish pytest_collect_file --> [<Module test_trading_report_service.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services' lenresult=12 outcome='passed'> [hook]
    genitems <Module test_ai_orchestrator_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_ai_orchestrator_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_ai_orchestrator_service.py>
      find_module called for: test_ai_orchestrator_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_ai_orchestrator_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_ai_orchestrator_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: uuid
            obj: <module 'uuid' from 'C:\\Program Files\\Python311\\Lib\\uuid.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: AIOrchestrator
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.AIOrchestrator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: AIAnalysisResult
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.AIAnalysisResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: OpportunityData
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.OpportunityData'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: ScalpingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ScalpingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: AIStrategyConfiguration
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.AIStrategyConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: ConfidenceThresholds
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.ConfidenceThresholds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: ai_orchestrator
            obj: <pytest_fixture(<function ai_orchestrator at 0x000001F9BBD16700>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: sample_opportunity_data
            obj: <pytest_fixture(<function sample_opportunity_data at 0x000001F9BBD167A0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: sample_scalping_strategy
            obj: <pytest_fixture(<function sample_scalping_strategy at 0x000001F9BBD16840>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: sample_ai_config
            obj: <pytest_fixture(<function sample_ai_config at 0x000001F9BBD168E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: TestAIOrchestrator
            obj: <class 'test_ai_orchestrator_service.TestAIOrchestrator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: TestAIAnalysisResult
            obj: <class 'test_ai_orchestrator_service.TestAIAnalysisResult'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_ai_orchestrator_service.py>
            name: TestOpportunityData
            obj: <class 'test_ai_orchestrator_service.TestOpportunityData'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_ai_orchestrator_service.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_ai_orchestrator_service.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_config_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_config_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_config_service.py>
      find_module called for: test_config_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_config_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_config_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: PortfolioService
            obj: <class 'src.ultibot_backend.services.portfolio_service.PortfolioService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: NotificationService
            obj: <class 'src.ultibot_backend.services.notification_service.NotificationService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: RealTradingSettings
            obj: <class 'src.shared.data_types.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: ConfigurationError
            obj: <class 'src.ultibot_backend.core.exceptions.ConfigurationError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: BinanceAPIError
            obj: <class 'src.ultibot_backend.core.exceptions.BinanceAPIError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: InsufficientUSDTBalanceError
            obj: <class 'src.ultibot_backend.core.exceptions.InsufficientUSDTBalanceError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: RealTradeLimitReachedError
            obj: <class 'src.ultibot_backend.core.exceptions.RealTradeLimitReachedError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: CredentialError
            obj: <class 'src.ultibot_backend.core.exceptions.CredentialError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F9BBD51F80>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: mock_credential_service
            obj: <pytest_fixture(<function mock_credential_service at 0x000001F9BBD52020>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: mock_portfolio_service
            obj: <pytest_fixture(<function mock_portfolio_service at 0x000001F9BBD520C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: mock_notification_service
            obj: <pytest_fixture(<function mock_notification_service at 0x000001F9BBD52160>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: config_service
            obj: <pytest_fixture(<function config_service at 0x000001F9BBD52200>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: sample_user_id
            obj: <pytest_fixture(<function sample_user_id at 0x000001F9BBD522A0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: default_user_config
            obj: <pytest_fixture(<function default_user_config at 0x000001F9BBD52340>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_config_service.py>
            name: TestConfigService
            obj: <class 'test_config_service.TestConfigService'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_config_service.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_config_service.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_credential_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_credential_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_credential_service.py>
      find_module called for: test_credential_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_credential_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_credential_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: ANY
            obj: <ANY>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: Fernet
            obj: <class 'cryptography.fernet.Fernet'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: InvalidToken
            obj: <class 'cryptography.fernet.InvalidToken'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: CredentialError
            obj: <class 'src.ultibot_backend.core.exceptions.CredentialError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: APICredential
            obj: <class 'src.shared.data_types.APICredential'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: ServiceName
            obj: <enum 'ServiceName'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: BinanceAPIError
            obj: <class 'src.ultibot_backend.core.exceptions.BinanceAPIError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: TEST_FERNET_KEY
            obj: aokcxjbfNLaq688JOsRnQ1S_3xhjHsfCnLwHC-iOsSo=
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F9BBD52DE0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: mock_binance_adapter
            obj: <pytest_fixture(<function mock_binance_adapter at 0x000001F9BBD52E80>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: credential_service
            obj: <pytest_fixture(<function credential_service at 0x000001F9BBD52F20>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: sample_user_id
            obj: <pytest_fixture(<function sample_user_id at 0x000001F9BBD52FC0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: sample_credential_data
            obj: <pytest_fixture(<function sample_credential_data at 0x000001F9BBD53060>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: sample_encrypted_credential
            obj: <pytest_fixture(<function sample_encrypted_credential at 0x000001F9BBD53100>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_encrypt_decrypt_data
            obj: <function test_encrypt_decrypt_data at 0x000001F9BBD531A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD707D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_encrypt_decrypt_data>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_decrypt_invalid_token
            obj: <function test_decrypt_invalid_token at 0x000001F9BBD53240>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD70E50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_decrypt_invalid_token>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_add_credential
            obj: <function test_add_credential at 0x000001F9BBD532E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD71510>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_add_credential>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_get_credential_success
            obj: <function test_get_credential_success at 0x000001F9BBD53380>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD71B50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_credential_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_get_credential_decryption_failure_key
            obj: <function test_get_credential_decryption_failure_key at 0x000001F9BBD53420>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD71F10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_credential_decryption_failure_key>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_verify_credential_binance_success
            obj: <function test_verify_credential_binance_success at 0x000001F9BBD534C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD72550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_verify_credential_binance_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_verify_credential_binance_api_error
            obj: <function test_verify_credential_binance_api_error at 0x000001F9BBD53560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD72D10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_verify_credential_binance_api_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_verify_credential_decryption_error
            obj: <function test_verify_credential_decryption_error at 0x000001F9BBD53600>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD73550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_verify_credential_decryption_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_credential_service.py>
            name: test_verify_credential_telegram_success
            obj: <function test_verify_credential_telegram_success at 0x000001F9BBD536A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD73E10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_verify_credential_telegram_success>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_credential_service.py' lenresult=9 outcome='passed'> [hook]
    genitems <Function test_encrypt_decrypt_data> [collection]
      pytest_itemcollected [hook]
          item: <Function test_encrypt_decrypt_data>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_decrypt_invalid_token> [collection]
      pytest_itemcollected [hook]
          item: <Function test_decrypt_invalid_token>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_add_credential> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_add_credential>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_credential_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_credential_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_credential_decryption_failure_key> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_credential_decryption_failure_key>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_verify_credential_binance_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_verify_credential_binance_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_verify_credential_binance_api_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_verify_credential_binance_api_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_verify_credential_decryption_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_verify_credential_decryption_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_verify_credential_telegram_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_verify_credential_telegram_success>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_credential_service.py' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_market_data_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_market_data_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_market_data_service.py>
      find_module called for: test_market_data_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_market_data_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_market_data_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: MarketDataService
            obj: <class 'src.ultibot_backend.services.market_data_service.MarketDataService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: CredentialError
            obj: <class 'src.ultibot_backend.core.exceptions.CredentialError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: BinanceAPIError
            obj: <class 'src.ultibot_backend.core.exceptions.BinanceAPIError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: APICredential
            obj: <class 'src.shared.data_types.APICredential'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: ServiceName
            obj: <enum 'ServiceName'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: BinanceConnectionStatus
            obj: <class 'src.shared.data_types.BinanceConnectionStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: AssetBalance
            obj: <class 'src.shared.data_types.AssetBalance'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: mock_credential_service
            obj: <pytest_fixture(<function mock_credential_service at 0x000001F9BBD84D60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: mock_binance_adapter
            obj: <pytest_fixture(<function mock_binance_adapter at 0x000001F9BBD84E00>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: market_data_service
            obj: <pytest_fixture(<function market_data_service at 0x000001F9BBD84EA0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: sample_user_id
            obj: <pytest_fixture(<function sample_user_id at 0x000001F9BBD84F40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: sample_binance_credential
            obj: <pytest_fixture(<function sample_binance_credential at 0x000001F9BBD84FE0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_connection_status_success
            obj: <function test_get_binance_connection_status_success at 0x000001F9BBD85080>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD7D1D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_connection_status_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_connection_status_no_credentials
            obj: <function test_get_binance_connection_status_no_credentials at 0x000001F9BBD85120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD7F2D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_connection_status_no_credentials>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_connection_status_verification_failed
            obj: <function test_get_binance_connection_status_verification_failed at 0x000001F9BBD851C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD7FBD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_connection_status_verification_failed>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_connection_status_credential_error
            obj: <function test_get_binance_connection_status_credential_error at 0x000001F9BBD85260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD98690>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_connection_status_credential_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_connection_status_binance_api_error
            obj: <function test_get_binance_connection_status_binance_api_error at 0x000001F9BBD85300>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD98D50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_connection_status_binance_api_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_spot_balances_success
            obj: <function test_get_binance_spot_balances_success at 0x000001F9BBD853A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD7FE50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_spot_balances_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_spot_balances_credential_not_found
            obj: <function test_get_binance_spot_balances_credential_not_found at 0x000001F9BBD85440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD7FA10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_spot_balances_credential_not_found>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_market_data_service.py>
            name: test_get_binance_spot_balances_api_error
            obj: <function test_get_binance_spot_balances_api_error at 0x000001F9BBD854E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD729D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_binance_spot_balances_api_error>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_market_data_service.py' lenresult=8 outcome='passed'> [hook]
    genitems <Coroutine test_get_binance_connection_status_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_connection_status_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_connection_status_no_credentials> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_connection_status_no_credentials>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_connection_status_verification_failed> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_connection_status_verification_failed>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_connection_status_credential_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_connection_status_credential_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_connection_status_binance_api_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_connection_status_binance_api_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_spot_balances_success> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_spot_balances_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_spot_balances_credential_not_found> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_spot_balances_credential_not_found>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_binance_spot_balances_api_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_binance_spot_balances_api_error>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_market_data_service.py' lenresult=8 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_performance_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_performance_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_performance_service.py>
      find_module called for: test_performance_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_performance_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_performance_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: PerformanceService
            obj: <class 'src.ultibot_backend.services.performance_service.PerformanceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: StrategyService
            obj: <class 'src.ultibot_backend.services.strategy_service.StrategyService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: OperatingMode
            obj: <enum 'OperatingMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: StrategyPerformanceData
            obj: <class 'src.ultibot_backend.api.v1.models.performance_models.StrategyPerformanceData'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: PositionStatus
            obj: <enum 'PositionStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: USER_ID
            obj: 6fdfe242-1446-43ff-ab81-3c9cdc5f51f3
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F9BBD86480>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: mock_strategy_service
            obj: <pytest_fixture(<function mock_strategy_service at 0x000001F9BBD86520>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: performance_service
            obj: <pytest_fixture(<function performance_service at 0x000001F9BBD865C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_no_trades
            obj: <function test_get_all_strategies_performance_no_trades at 0x000001F9BBD86660>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBD98A10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_no_trades>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_no_closed_trades
            obj: <function test_get_all_strategies_performance_no_closed_trades at 0x000001F9BBD86700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA46D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_no_closed_trades>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_with_closed_trades
            obj: <function test_get_all_strategies_performance_with_closed_trades at 0x000001F9BBD867A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA4E50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_with_closed_trades>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_multiple_trades_mixed_pnl
            obj: <function test_get_all_strategies_performance_multiple_trades_mixed_pnl at 0x000001F9BBD86840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA5890>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_multiple_trades_mixed_pnl>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_mode_filtering_real
            obj: <function test_get_all_strategies_performance_mode_filtering_real at 0x000001F9BBD868E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA5E10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_mode_filtering_real>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_unknown_strategy
            obj: <function test_get_all_strategies_performance_unknown_strategy at 0x000001F9BBD86980>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA65D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_unknown_strategy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_multiple_strategies_different_modes
            obj: <function test_get_all_strategies_performance_multiple_strategies_different_modes at 0x000001F9BBD86A20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA6D90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_multiple_strategies_different_modes>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_breakeven_trades
            obj: <function test_get_all_strategies_performance_breakeven_trades at 0x000001F9BBD86AC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA7550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_breakeven_trades>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_trade_with_none_strategy_id
            obj: <function test_get_all_strategies_performance_trade_with_none_strategy_id at 0x000001F9BBD86B60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA7D90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_trade_with_none_strategy_id>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_performance_service.py>
            name: test_get_all_strategies_performance_win_rate_edge_cases
            obj: <function test_get_all_strategies_performance_win_rate_edge_cases at 0x000001F9BBD86C00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDA7D90>
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: []
                argname: trades_pnl
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: 0.0
                argname: expected_win_rate
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: No trades, win rate 0%
                argname: description
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: [10.0, 20.0]
                argname: trades_pnl
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: 100.0
                argname: expected_win_rate
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: All winning trades, win rate 100%
                argname: description
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: [-5.0, -15.0]
                argname: trades_pnl
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: 0.0
                argname: expected_win_rate
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: All losing trades, win rate 0%
                argname: description
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: [10.0, -5.0, 0.0]
                argname: trades_pnl
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: 50.0 ± 5.0e-05
                argname: expected_win_rate
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: Mixed with one breakeven, win rate 50% of non-breakeven
                argname: description
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: [0.0, 0.0]
                argname: trades_pnl
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: 0.0
                argname: expected_win_rate
            finish pytest_make_parametrize_id --> None [hook]
            pytest_make_parametrize_id [hook]
                config: <_pytest.config.Config object at 0x000001F986AED450>
                val: All breakeven trades, win rate 0%
                argname: description
            finish pytest_make_parametrize_id --> None [hook]
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl0-0.0-No trades, win rate 0%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl1-100.0-All winning trades, win rate 100%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl2-0.0-All losing trades, win rate 0%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl3-expected_win_rate3-Mixed with one breakeven, win rate 50% of non-breakeven]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl4-0.0-All breakeven trades, win rate 0%]>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_performance_service.py' lenresult=14 outcome='passed'> [hook]
    genitems <Coroutine test_get_all_strategies_performance_no_trades> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_no_trades>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_no_closed_trades> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_no_closed_trades>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_with_closed_trades> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_with_closed_trades>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_multiple_trades_mixed_pnl> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_multiple_trades_mixed_pnl>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_mode_filtering_real> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_mode_filtering_real>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_unknown_strategy> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_unknown_strategy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_multiple_strategies_different_modes> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_multiple_strategies_different_modes>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_breakeven_trades> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_breakeven_trades>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_trade_with_none_strategy_id> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_trade_with_none_strategy_id>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl0-0.0-No trades, win rate 0%]> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl0-0.0-No trades, win rate 0%]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl1-100.0-All winning trades, win rate 100%]> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl1-100.0-All winning trades, win rate 100%]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl2-0.0-All losing trades, win rate 0%]> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl2-0.0-All losing trades, win rate 0%]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl3-expected_win_rate3-Mixed with one breakeven, win rate 50% of non-breakeven]> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl3-expected_win_rate3-Mixed with one breakeven, win rate 50% of non-breakeven]>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl4-0.0-All breakeven trades, win rate 0%]> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl4-0.0-All breakeven trades, win rate 0%]>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_performance_service.py' lenresult=14 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_engine_capital_management.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_engine_capital_management.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_engine_capital_management.py>
      find_module called for: test_trading_engine_capital_management [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_engine_capital_management.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_capital_management.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: timedelta
            obj: <class 'datetime.timedelta'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: OrderExecutionService
            obj: <class 'src.ultibot_backend.services.order_execution_service.OrderExecutionService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: MarketDataService
            obj: <class 'src.ultibot_backend.services.market_data_service.MarketDataService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: PortfolioService
            obj: <class 'src.ultibot_backend.services.portfolio_service.PortfolioService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: NotificationService
            obj: <class 'src.ultibot_backend.services.notification_service.NotificationService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: OrderExecutionError
            obj: <class 'src.ultibot_backend.core.exceptions.OrderExecutionError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: RealTradingSettings
            obj: <class 'src.shared.data_types.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: RiskProfileSettings
            obj: <class 'src.shared.data_types.RiskProfileSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: PortfolioSnapshot
            obj: <class 'src.shared.data_types.PortfolioSnapshot'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: PortfolioSummary
            obj: <class 'src.shared.data_types.PortfolioSummary'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: Opportunity
            obj: <class 'src.shared.data_types.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: AIAnalysis
            obj: <class 'src.shared.data_types.AIAnalysis'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: OpportunitySourceType
            obj: <enum 'OpportunitySourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: trading_engine_service
            obj: <pytest_fixture(<function trading_engine_service at 0x000001F9BBD877E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_capital_management.py>
            name: TestCapitalManagementLogic
            obj: <class 'test_trading_engine_capital_management.TestCapitalManagementLogic'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_engine_capital_management.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_engine_capital_management.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_engine_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_engine_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_engine_service.py>
      find_module called for: test_trading_engine_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_engine_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: OrderExecutionService
            obj: <class 'src.ultibot_backend.services.order_execution_service.OrderExecutionService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: MarketDataService
            obj: <class 'src.ultibot_backend.services.market_data_service.MarketDataService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: PortfolioService
            obj: <class 'src.ultibot_backend.services.portfolio_service.PortfolioService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: NotificationService
            obj: <class 'src.ultibot_backend.services.notification_service.NotificationService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: OrderExecutionError
            obj: <class 'src.ultibot_backend.core.exceptions.OrderExecutionError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: ConfigurationError
            obj: <class 'src.ultibot_backend.core.exceptions.ConfigurationError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: CredentialError
            obj: <class 'src.ultibot_backend.core.exceptions.CredentialError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: MarketDataError
            obj: <class 'src.ultibot_backend.core.exceptions.MarketDataError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: Opportunity
            obj: <class 'src.shared.data_types.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: AIAnalysis
            obj: <class 'src.shared.data_types.AIAnalysis'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: RealTradingSettings
            obj: <class 'src.shared.data_types.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: RiskProfileSettings
            obj: <class 'src.shared.data_types.RiskProfileSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: TradeOrderDetails
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.TradeOrderDetails'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: OpportunitySourceType
            obj: <enum 'OpportunitySourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: ServiceName
            obj: <enum 'ServiceName'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: PortfolioSnapshot
            obj: <class 'src.shared.data_types.PortfolioSnapshot'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: PortfolioSummary
            obj: <class 'src.shared.data_types.PortfolioSummary'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: OrderCategory
            obj: <enum 'OrderCategory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: TP_PERCENTAGE_DEFAULT
            obj: 0.02
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: TSL_PERCENTAGE_DEFAULT
            obj: 0.01
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: TSL_CALLBACK_RATE_DEFAULT
            obj: 0.005
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_config_service
            obj: <pytest_fixture(<function mock_config_service at 0x000001F9BBDC4180>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_order_execution_service
            obj: <pytest_fixture(<function mock_order_execution_service at 0x000001F9BBDC4220>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_paper_order_execution_service
            obj: <pytest_fixture(<function mock_paper_order_execution_service at 0x000001F9BBDC42C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_credential_service
            obj: <pytest_fixture(<function mock_credential_service at 0x000001F9BBDC4360>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_market_data_service
            obj: <pytest_fixture(<function mock_market_data_service at 0x000001F9BBDC4400>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_portfolio_service
            obj: <pytest_fixture(<function mock_portfolio_service at 0x000001F9BBDC44A0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F9BBDC4540>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_notification_service
            obj: <pytest_fixture(<function mock_notification_service at 0x000001F9BBDC45E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: mock_binance_adapter
            obj: <pytest_fixture(<function mock_binance_adapter at 0x000001F9BBDC4680>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: trading_engine_service
            obj: <pytest_fixture(<function trading_engine_service at 0x000001F9BBDC4720>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_sets_tsl_tp_from_user_config
            obj: <function test_execute_real_trade_sets_tsl_tp_from_user_config at 0x000001F9BBDC47C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDCB050>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config
            obj: <function test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config at 0x000001F9BBDC4860>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDCB3D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably
            obj: <function test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably at 0x000001F9BBDC4900>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDCBA50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably
            obj: <function test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably at 0x000001F9BBDC49A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD8590>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably
            obj: <function test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably at 0x000001F9BBDC4A40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD8B50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably
            obj: <function test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably at 0x000001F9BBDC4AE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDCB350>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_detects_tp_hit_for_buy_trade
            obj: <function test_monitor_real_trade_detects_tp_hit_for_buy_trade at 0x000001F9BBDC4B80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD92D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_detects_tp_hit_for_buy_trade>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_detects_tp_hit_for_sell_trade
            obj: <function test_monitor_real_trade_detects_tp_hit_for_sell_trade at 0x000001F9BBDC4C20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD95D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_detects_tp_hit_for_sell_trade>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_detects_tsl_hit_for_buy_trade
            obj: <function test_monitor_real_trade_detects_tsl_hit_for_buy_trade at 0x000001F9BBDC4CC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD9950>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_detects_tsl_hit_for_buy_trade>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_detects_tsl_hit_for_sell_trade
            obj: <function test_monitor_real_trade_detects_tsl_hit_for_sell_trade at 0x000001F9BBDC4D60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD9950>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_detects_tsl_hit_for_sell_trade>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_handles_no_tsl_configured
            obj: <function test_monitor_real_trade_handles_no_tsl_configured at 0x000001F9BBDC4E00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDDA790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_handles_no_tsl_configured>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_monitor_real_trade_handles_market_data_service_failure
            obj: <function test_monitor_real_trade_handles_market_data_service_failure at 0x000001F9BBDC4EA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDDB050>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_monitor_real_trade_handles_market_data_service_failure>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_close_real_trade_successful_execution
            obj: <function test_close_real_trade_successful_execution at 0x000001F9BBDC4F40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDDB790>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_close_real_trade_successful_execution>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_close_real_trade_handles_credential_error
            obj: <function test_close_real_trade_handles_credential_error at 0x000001F9BBDC4FE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDDBE90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_close_real_trade_handles_credential_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_close_real_trade_handles_order_execution_error
            obj: <function test_close_real_trade_handles_order_execution_error at 0x000001F9BBDC5080>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD9590>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_close_real_trade_handles_order_execution_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_close_real_trade_handles_persistence_error
            obj: <function test_close_real_trade_handles_persistence_error at 0x000001F9BBDC5120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDE8DD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_close_real_trade_handles_persistence_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_close_real_trade_handles_portfolio_update_error
            obj: <function test_close_real_trade_handles_portfolio_update_error at 0x000001F9BBDC51C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDE94D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_close_real_trade_handles_portfolio_update_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_close_real_trade_handles_notification_error
            obj: <function test_close_real_trade_handles_notification_error at 0x000001F9BBDC5260>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDE9C90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_close_real_trade_handles_notification_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_fails_if_opportunity_not_pending_confirmation
            obj: <function test_execute_real_trade_fails_if_opportunity_not_pending_confirmation at 0x000001F9BBDC5300>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDEA4D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_fails_if_opportunity_not_pending_confirmation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_fails_if_user_config_missing
            obj: <function test_execute_real_trade_fails_if_user_config_missing at 0x000001F9BBDC53A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDDBDD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_fails_if_user_config_missing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_fails_if_daily_capital_limit_exceeded
            obj: <function test_execute_real_trade_fails_if_daily_capital_limit_exceeded at 0x000001F9BBDC5440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDDB1D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_fails_if_daily_capital_limit_exceeded>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative
            obj: <function test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative at 0x000001F9BBDC54E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDD9C50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_handles_market_data_error
            obj: <function test_execute_real_trade_handles_market_data_error at 0x000001F9BBDC5580>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDEAD90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_market_data_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_handles_credential_error
            obj: <function test_execute_real_trade_handles_credential_error at 0x000001F9BBDC5620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDEA690>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_credential_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_handles_order_execution_error
            obj: <function test_execute_real_trade_handles_order_execution_error at 0x000001F9BBDC5760>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDE9E90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_order_execution_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_handles_persistence_error_after_order
            obj: <function test_execute_real_trade_handles_persistence_error_after_order at 0x000001F9BBDC58A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDE95D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_persistence_error_after_order>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_handles_opportunity_status_update_error
            obj: <function test_execute_real_trade_handles_opportunity_status_update_error at 0x000001F9BBDC59E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDE87D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_opportunity_status_update_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service.py>
            name: test_execute_real_trade_handles_config_save_error
            obj: <function test_execute_real_trade_handles_config_save_error at 0x000001F9BBDC5B20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDEB550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_config_save_error>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_engine_service.py' lenresult=28 outcome='passed'> [hook]
    genitems <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_detects_tp_hit_for_buy_trade> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_detects_tp_hit_for_buy_trade>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_detects_tp_hit_for_sell_trade> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_detects_tp_hit_for_sell_trade>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_detects_tsl_hit_for_buy_trade> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_detects_tsl_hit_for_buy_trade>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_detects_tsl_hit_for_sell_trade> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_detects_tsl_hit_for_sell_trade>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_handles_no_tsl_configured> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_handles_no_tsl_configured>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_monitor_real_trade_handles_market_data_service_failure> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_monitor_real_trade_handles_market_data_service_failure>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_close_real_trade_successful_execution> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_close_real_trade_successful_execution>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_close_real_trade_handles_credential_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_close_real_trade_handles_credential_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_close_real_trade_handles_order_execution_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_close_real_trade_handles_order_execution_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_close_real_trade_handles_persistence_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_close_real_trade_handles_persistence_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_close_real_trade_handles_portfolio_update_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_close_real_trade_handles_portfolio_update_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_close_real_trade_handles_notification_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_close_real_trade_handles_notification_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_fails_if_opportunity_not_pending_confirmation> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_fails_if_opportunity_not_pending_confirmation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_fails_if_user_config_missing> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_fails_if_user_config_missing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_fails_if_daily_capital_limit_exceeded> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_fails_if_daily_capital_limit_exceeded>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_market_data_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_market_data_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_credential_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_credential_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_order_execution_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_order_execution_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_persistence_error_after_order> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_persistence_error_after_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_opportunity_status_update_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_opportunity_status_update_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_config_save_error> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_config_save_error>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_engine_service.py' lenresult=28 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_engine_service_corrected.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_engine_service_corrected.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_engine_service_corrected.py>
      find_module called for: test_trading_engine_service_corrected [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_engine_service_corrected.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_service_corrected.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: OrderExecutionService
            obj: <class 'src.ultibot_backend.services.order_execution_service.OrderExecutionService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: CredentialService
            obj: <class 'src.ultibot_backend.services.credential_service.CredentialService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: MarketDataService
            obj: <class 'src.ultibot_backend.services.market_data_service.MarketDataService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: PortfolioService
            obj: <class 'src.ultibot_backend.services.portfolio_service.PortfolioService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: SupabasePersistenceService
            obj: <class 'src.ultibot_backend.adapters.persistence_service.SupabasePersistenceService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: NotificationService
            obj: <class 'src.ultibot_backend.services.notification_service.NotificationService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: BinanceAdapter
            obj: <class 'src.ultibot_backend.adapters.binance_adapter.BinanceAdapter'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: OrderExecutionError
            obj: <class 'src.ultibot_backend.core.exceptions.OrderExecutionError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: ConfigurationError
            obj: <class 'src.ultibot_backend.core.exceptions.ConfigurationError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: CredentialError
            obj: <class 'src.ultibot_backend.core.exceptions.CredentialError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: MarketDataError
            obj: <class 'src.ultibot_backend.core.exceptions.MarketDataError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: Opportunity
            obj: <class 'src.shared.data_types.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: AIAnalysis
            obj: <class 'src.shared.data_types.AIAnalysis'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: UserConfiguration
            obj: <class 'src.shared.data_types.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: RealTradingSettings
            obj: <class 'src.shared.data_types.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: RiskProfileSettings
            obj: <class 'src.shared.data_types.RiskProfileSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: TradeOrderDetails
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.TradeOrderDetails'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: OpportunitySourceType
            obj: <enum 'OpportunitySourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: ServiceName
            obj: <enum 'ServiceName'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: PortfolioSnapshot
            obj: <class 'src.shared.data_types.PortfolioSnapshot'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: PortfolioSummary
            obj: <class 'src.shared.data_types.PortfolioSummary'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: OrderCategory
            obj: <enum 'OrderCategory'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: TP_PERCENTAGE_DEFAULT
            obj: 0.02
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: TSL_PERCENTAGE_DEFAULT
            obj: 0.01
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: TSL_CALLBACK_RATE_DEFAULT
            obj: 0.005
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_config_service
            obj: <pytest_fixture(<function mock_config_service at 0x000001F9BBDC60C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_order_execution_service
            obj: <pytest_fixture(<function mock_order_execution_service at 0x000001F9BBDC5DA0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_paper_order_execution_service
            obj: <pytest_fixture(<function mock_paper_order_execution_service at 0x000001F9BBDC5EE0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_credential_service
            obj: <pytest_fixture(<function mock_credential_service at 0x000001F9BBDC5C60>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_market_data_service
            obj: <pytest_fixture(<function mock_market_data_service at 0x000001F9BBDC7240>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_portfolio_service
            obj: <pytest_fixture(<function mock_portfolio_service at 0x000001F9BBDC71A0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F9BBDC6FC0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_notification_service
            obj: <pytest_fixture(<function mock_notification_service at 0x000001F9BBDC72E0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: mock_binance_adapter
            obj: <pytest_fixture(<function mock_binance_adapter at 0x000001F9BBDC7380>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: trading_engine_service
            obj: <pytest_fixture(<function trading_engine_service at 0x000001F9BBDC7420>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: test_execute_real_trade_sets_tsl_tp_from_user_config
            obj: <function test_execute_real_trade_sets_tsl_tp_from_user_config at 0x000001F9BBDC74C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDF5FD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_service_corrected.py>
            name: test_execute_real_trade_handles_oco_order_failure
            obj: <function test_execute_real_trade_handles_oco_order_failure at 0x000001F9BBDC7560>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBDF62D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Coroutine test_execute_real_trade_handles_oco_order_failure>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_engine_service_corrected.py' lenresult=2 outcome='passed'> [hook]
    genitems <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>
      finish pytest_itemcollected --> [] [hook]
    genitems <Coroutine test_execute_real_trade_handles_oco_order_failure> [collection]
      pytest_itemcollected [hook]
          item: <Coroutine test_execute_real_trade_handles_oco_order_failure>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_engine_service_corrected.py' lenresult=2 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_engine_story_5_4.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_engine_story_5_4.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_engine_story_5_4.py>
      find_module called for: test_trading_engine_story_5_4 [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_engine_story_5_4.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_engine_story_5_4.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: asyncio
            obj: <module 'asyncio' from 'C:\\Program Files\\Python311\\Lib\\asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: uuid4
            obj: <function uuid4 at 0x000001F9866D4400>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TradingEngine
            obj: <class 'src.ultibot_backend.services.trading_engine_service.TradingEngine'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TradingDecision
            obj: <class 'src.ultibot_backend.services.trading_engine_service.TradingDecision'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: StrategyService
            obj: <class 'src.ultibot_backend.services.strategy_service.StrategyService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: AIOrchestrator
            obj: <class 'src.ultibot_backend.services.ai_orchestrator_service.AIOrchestrator'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: ScalpingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ScalpingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: ApplicabilityRules
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ApplicabilityRules'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: Opportunity
            obj: <class 'src.ultibot_backend.core.domain_models.opportunity_models.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: InitialSignal
            obj: <class 'src.ultibot_backend.core.domain_models.opportunity_models.InitialSignal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: SourceType
            obj: <enum 'SourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: Direction
            obj: <enum 'Direction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TradeOrderDetails
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.TradeOrderDetails'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TradeMode
            obj: <enum 'TradeMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TradeSide
            obj: <enum 'TradeSide'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: PositionStatus
            obj: <enum 'PositionStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: OrderType
            obj: <enum 'OrderType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: OrderStatus
            obj: <enum 'OrderStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: UserConfiguration
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.UserConfiguration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: RealTradingSettings
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.RealTradingSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: ConfidenceThresholds
            obj: <class 'src.ultibot_backend.core.domain_models.user_configuration_models.ConfidenceThresholds'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: mock_strategy_service
            obj: <pytest_fixture(<function mock_strategy_service at 0x000001F9BBDC7600>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: mock_config_service
            obj: <pytest_fixture(<function mock_config_service at 0x000001F9BBDC6980>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: mock_ai_orchestrator
            obj: <pytest_fixture(<function mock_ai_orchestrator at 0x000001F9BBDC6340>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: trading_engine
            obj: <pytest_fixture(<function trading_engine at 0x000001F9BBDC65C0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: sample_opportunity
            obj: <pytest_fixture(<function sample_opportunity at 0x000001F9BBDC6A20>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: sample_strategy
            obj: <pytest_fixture(<function sample_strategy at 0x000001F9BBDC6700>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TestProcessOpportunityWithActiveStrategies
            obj: <class 'test_trading_engine_story_5_4.TestProcessOpportunityWithActiveStrategies'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TestFilterApplicableStrategies
            obj: <class 'test_trading_engine_story_5_4.TestFilterApplicableStrategies'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TestConsolidateAndExecuteDecisions
            obj: <class 'test_trading_engine_story_5_4.TestConsolidateAndExecuteDecisions'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TestExecuteDecisionByMode
            obj: <class 'test_trading_engine_story_5_4.TestExecuteDecisionByMode'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_engine_story_5_4.py>
            name: TestDetermineTradeSimpleFromOpportunity
            obj: <class 'test_trading_engine_story_5_4.TestDetermineTradeSimpleFromOpportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_engine_story_5_4.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_engine_story_5_4.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_mode_basic.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_mode_basic.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_mode_basic.py>
      find_module called for: test_trading_mode_basic [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_mode_basic.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_basic.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: TestTradingModeEnum
            obj: <class 'test_trading_mode_basic.TestTradingModeEnum'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: TestBasicTradingModeLogic
            obj: <class 'test_trading_mode_basic.TestBasicTradingModeLogic'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_basic.py>
            name: TestAPIClientTradingModeSupport
            obj: <class 'test_trading_mode_basic.TestAPIClientTradingModeSupport'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_mode_basic.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_mode_basic.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_mode_state.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_mode_state.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_mode_state.py>
      find_module called for: test_trading_mode_state [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_mode_state.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_mode_state.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: MagicMock
            obj: <class 'unittest.mock.MagicMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: sys
            obj: <module 'sys' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: TradingModeStateManager
            obj: <class 'src.ultibot_ui.services.trading_mode_state.TradingModeStateManager'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: TradingModeEnum
            obj: <enum 'TradingModeEnum'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: get_trading_mode_manager
            obj: <function get_trading_mode_manager at 0x000001F98E4E9BC0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: reset_trading_mode_manager
            obj: <function reset_trading_mode_manager at 0x000001F98E5A7420>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: TestTradingModeEnum
            obj: <class 'test_trading_mode_state.TestTradingModeEnum'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: TestTradingModeStateManager
            obj: <class 'test_trading_mode_state.TestTradingModeStateManager'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_mode_state.py>
            name: TestGlobalStateManager
            obj: <class 'test_trading_mode_state.TestGlobalStateManager'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_mode_state.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_mode_state.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_trading_report_service.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_trading_report_service.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_trading_report_service.py>
      find_module called for: test_trading_report_service [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\services\\test_trading_report_service.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\services\test_trading_report_service.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: pytest_asyncio
            obj: <module 'pytest_asyncio' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest_asyncio\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: timedelta
            obj: <class 'datetime.timedelta'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: UUID
            obj: <class 'uuid.UUID'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: TradingReportService
            obj: <class 'src.ultibot_backend.services.trading_report_service.TradingReportService'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: ReportError
            obj: <class 'src.ultibot_backend.core.exceptions.ReportError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: Trade
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.Trade'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: PerformanceMetrics
            obj: <class 'src.shared.data_types.PerformanceMetrics'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: TradeOrderDetails
            obj: <class 'src.ultibot_backend.core.domain_models.trade_models.TradeOrderDetails'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: mock_persistence_service
            obj: <pytest_fixture(<function mock_persistence_service at 0x000001F9BBE02700>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: trading_report_service
            obj: <pytest_fixture(<function trading_report_service at 0x000001F9BBE027A0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: sample_trade_data
            obj: <pytest_fixture(<function sample_trade_data at 0x000001F9BBE02840>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_trading_report_service.py>
            name: TestTradingReportService
            obj: <class 'test_trading_report_service.TestTradingReportService'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/services/test_trading_report_service.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services/test_trading_report_service.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/services' lenresult=12 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir shared> [collection]
      pytest_collectstart [hook]
          collector: <Dir shared>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir shared>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\__pycache__
        finish pytest_ignore_collect --> True [hook]
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py
        finish pytest_ignore_collect --> None [hook]
        pytest_collect_file [hook]
            parent: <Dir shared>
            file_path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py
          pytest_pycollect_makemodule [hook]
              parent: <Dir shared>
              module_path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py
              path: C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py
          finish pytest_pycollect_makemodule --> <Module test_data_types.py> [hook]
        finish pytest_collect_file --> [<Module test_data_types.py>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/shared' lenresult=1 outcome='passed'> [hook]
    genitems <Module test_data_types.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_data_types.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_data_types.py>
      find_module called for: test_data_types [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\shared\\test_data_types.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\shared\test_data_types.py [assertion]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/shared/test_data_types.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/shared/test_data_types.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/shared' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir strategies> [collection]
      pytest_collectstart [hook]
          collector: <Dir strategies>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir strategies>
        pytest_ignore_collect [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            collection_path: C:\Users\zamor\UltiBotInversiones\tests\unit\strategies\__pycache__
            path: C:\Users\zamor\UltiBotInversiones\tests\unit\strategies\__pycache__
        finish pytest_ignore_collect --> True [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/strategies' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/strategies' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_app_config.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_app_config.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_app_config.py>
      find_module called for: test_app_config [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\test_app_config.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\test_app_config.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: os
            obj: <module 'os' (frozen)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: patch
            obj: <function patch at 0x000001F98AE071A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: ValidationError
            obj: <class 'pydantic_core._pydantic_core.ValidationError'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: AppSettings
            obj: <class 'src.ultibot_backend.app_config.AppSettings'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: test_load_credential_encryption_key_success
            obj: <function test_load_credential_encryption_key_success at 0x000001F9BBE00C20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBE1BB50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_credential_encryption_key_success>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: test_load_credential_encryption_key_missing_raises_validation_error
            obj: <function test_load_credential_encryption_key_missing_raises_validation_error at 0x000001F9BBE03060>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBE20550>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_load_credential_encryption_key_missing_raises_validation_error>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_app_config.py>
            name: test_log_level_default
            obj: <function test_log_level_default at 0x000001F9BBE03100>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBE207D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_log_level_default>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/test_app_config.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_load_credential_encryption_key_success> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_credential_encryption_key_success>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_load_credential_encryption_key_missing_raises_validation_error> [collection]
      pytest_itemcollected [hook]
          item: <Function test_load_credential_encryption_key_missing_raises_validation_error>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_log_level_default> [collection]
      pytest_itemcollected [hook]
          item: <Function test_log_level_default>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/test_app_config.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_autonomous_strategies.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_autonomous_strategies.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_autonomous_strategies.py>
      find_module called for: test_autonomous_strategies [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\test_autonomous_strategies.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\test_autonomous_strategies.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: uuid
            obj: <module 'uuid' from 'C:\\Program Files\\Python311\\Lib\\uuid.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: datetime
            obj: <class 'datetime.datetime'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: timezone
            obj: <class 'datetime.timezone'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: Mock
            obj: <class 'unittest.mock.Mock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: AsyncMock
            obj: <class 'unittest.mock.AsyncMock'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TradingEngine
            obj: <class 'src.ultibot_backend.services.trading_engine_service.TradingEngine'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TradingDecision
            obj: <class 'src.ultibot_backend.services.trading_engine_service.TradingDecision'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TradingStrategyConfig
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.TradingStrategyConfig'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: BaseStrategyType
            obj: <enum 'BaseStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: ScalpingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ScalpingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: DayTradingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.DayTradingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: ArbitrageSimpleParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.ArbitrageSimpleParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: GridTradingParameters
            obj: <class 'src.ultibot_backend.core.domain_models.trading_strategy_models.GridTradingParameters'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: Opportunity
            obj: <class 'src.ultibot_backend.core.domain_models.opportunity_models.Opportunity'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: OpportunityStatus
            obj: <enum 'OpportunityStatus'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: SourceType
            obj: <enum 'SourceType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: Direction
            obj: <enum 'Direction'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: InitialSignal
            obj: <class 'src.ultibot_backend.core.domain_models.opportunity_models.InitialSignal'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: mock_strategy_service_no_ai
            obj: <pytest_fixture(<function mock_strategy_service_no_ai at 0x000001F9BBE03B00>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: mock_configuration_service
            obj: <pytest_fixture(<function mock_configuration_service at 0x000001F9BBE03BA0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: mock_ai_orchestrator
            obj: <pytest_fixture(<function mock_ai_orchestrator at 0x000001F9BBE03C40>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: trading_engine_no_ai
            obj: <pytest_fixture(<function trading_engine_no_ai at 0x000001F9BBE03CE0>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: sample_opportunity
            obj: <pytest_fixture(<function sample_opportunity at 0x000001F9BBE03D80>)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TestAutonomousScalpingStrategy
            obj: <class 'test_autonomous_strategies.TestAutonomousScalpingStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TestAutonomousDayTradingStrategy
            obj: <class 'test_autonomous_strategies.TestAutonomousDayTradingStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TestAutonomousArbitrageStrategy
            obj: <class 'test_autonomous_strategies.TestAutonomousArbitrageStrategy'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TestUnknownStrategyType
            obj: <class 'test_autonomous_strategies.TestUnknownStrategyType'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TestStrategyServiceIntegration
            obj: <class 'test_autonomous_strategies.TestStrategyServiceIntegration'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_autonomous_strategies.py>
            name: TestPerformanceConsiderations
            obj: <class 'test_autonomous_strategies.TestPerformanceConsiderations'>
        finish pytest_pycollect_makeitem --> None [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/test_autonomous_strategies.py' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/test_autonomous_strategies.py' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module test_hello_world.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_hello_world.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_hello_world.py>
      find_module called for: test_hello_world [assertion]
      matched test file 'C:\\Users\\zamor\\UltiBotInversiones\\tests\\unit\\test_hello_world.py' [assertion]
      found cached rewritten pyc for C:\Users\zamor\UltiBotInversiones\tests\unit\test_hello_world.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hello_world.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hello_world.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_hello_world.py>
            name: test_hello_world
            obj: <function test_hello_world at 0x000001F9BBE03880>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001F9BBE23E50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_hello_world>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/test_hello_world.py' lenresult=1 outcome='passed'> [hook]
    genitems <Function test_hello_world> [collection]
      pytest_itemcollected [hook]
          item: <Function test_hello_world>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/test_hello_world.py' lenresult=1 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Dir ui> [collection]
      pytest_collectstart [hook]
          collector: <Dir ui>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Dir ui>
      finish pytest_make_collect_report --> <CollectReport 'tests/unit/ui' lenresult=0 outcome='passed'> [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit/ui' lenresult=0 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/unit' lenresult=9 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests' lenresult=5 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x000001F986AED450>
          items: [<Coroutine test_get_strategies_performance_endpoint_no_data>, <Coroutine test_get_strategies_performance_endpoint_with_data>, <Coroutine test_get_strategies_performance_endpoint_filter_real_mode>, <Coroutine test_get_strategies_performance_endpoint_multiple_strategies>, <Coroutine test_get_strategies_performance_endpoint_strategy_not_found>, <Coroutine test_get_strategies_performance_endpoint_invalid_mode_parameter>, <Coroutine test_get_strategies_performance_endpoint_no_mode_filter>, <Coroutine test_get_user_config_initial>, <Coroutine test_patch_user_config_update_paper_trading>, <Coroutine test_patch_user_config_only_paper_trading_active>, <Coroutine test_patch_user_config_only_capital>, <Coroutine test_patch_user_config_invalid_data>, <Coroutine test_complete_real_trading_flow_with_capital_management>, <Coroutine test_complete_real_trading_flow_capital_limit_exceeded>, <Coroutine test_complete_real_trading_tsl_monitoring_and_execution>, <Coroutine test_capital_management_daily_reset>, <Coroutine test_start_application_success>, <Coroutine test_get_account_info_success>, <Coroutine test_get_account_info_api_error>, <Coroutine test_get_spot_balances_success>, <Coroutine test_get_spot_balances_parsing_error>, <Coroutine test_make_request_get_success>, <Coroutine test_make_request_retry_on_5xx_then_success>, <Coroutine test_make_request_fail_after_retries_on_5xx>, <Coroutine test_make_request_client_error_no_retry>, <Coroutine test_get_user_configuration_found>, <Coroutine test_get_user_configuration_not_found>, <Coroutine test_get_user_configuration_db_error>, <Coroutine test_upsert_user_configuration_insert>, <Coroutine test_upsert_user_configuration_update>, <Coroutine test_upsert_user_configuration_db_error>, <Coroutine test_save_credential>, <Function test_encrypt_decrypt_data>, <Function test_decrypt_invalid_token>, <Coroutine test_add_credential>, <Coroutine test_get_credential_success>, <Coroutine test_get_credential_decryption_failure_key>, <Coroutine test_verify_credential_binance_success>, <Coroutine test_verify_credential_binance_api_error>, <Coroutine test_verify_credential_decryption_error>, <Coroutine test_verify_credential_telegram_success>, <Coroutine test_get_binance_connection_status_success>, <Coroutine test_get_binance_connection_status_no_credentials>, <Coroutine test_get_binance_connection_status_verification_failed>, <Coroutine test_get_binance_connection_status_credential_error>, <Coroutine test_get_binance_connection_status_binance_api_error>, <Coroutine test_get_binance_spot_balances_success>, <Coroutine test_get_binance_spot_balances_credential_not_found>, <Coroutine test_get_binance_spot_balances_api_error>, <Coroutine test_get_all_strategies_performance_no_trades>, <Coroutine test_get_all_strategies_performance_no_closed_trades>, <Coroutine test_get_all_strategies_performance_with_closed_trades>, <Coroutine test_get_all_strategies_performance_multiple_trades_mixed_pnl>, <Coroutine test_get_all_strategies_performance_mode_filtering_real>, <Coroutine test_get_all_strategies_performance_unknown_strategy>, <Coroutine test_get_all_strategies_performance_multiple_strategies_different_modes>, <Coroutine test_get_all_strategies_performance_breakeven_trades>, <Coroutine test_get_all_strategies_performance_trade_with_none_strategy_id>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl0-0.0-No trades, win rate 0%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl1-100.0-All winning trades, win rate 100%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl2-0.0-All losing trades, win rate 0%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl3-expected_win_rate3-Mixed with one breakeven, win rate 50% of non-breakeven]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl4-0.0-All breakeven trades, win rate 0%]>, <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>, <Coroutine test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config>, <Coroutine test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably>, <Coroutine test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably>, <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably>, <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably>, <Coroutine test_monitor_real_trade_detects_tp_hit_for_buy_trade>, <Coroutine test_monitor_real_trade_detects_tp_hit_for_sell_trade>, <Coroutine test_monitor_real_trade_detects_tsl_hit_for_buy_trade>, <Coroutine test_monitor_real_trade_detects_tsl_hit_for_sell_trade>, <Coroutine test_monitor_real_trade_handles_no_tsl_configured>, <Coroutine test_monitor_real_trade_handles_market_data_service_failure>, <Coroutine test_close_real_trade_successful_execution>, <Coroutine test_close_real_trade_handles_credential_error>, <Coroutine test_close_real_trade_handles_order_execution_error>, <Coroutine test_close_real_trade_handles_persistence_error>, <Coroutine test_close_real_trade_handles_portfolio_update_error>, <Coroutine test_close_real_trade_handles_notification_error>, <Coroutine test_execute_real_trade_fails_if_opportunity_not_pending_confirmation>, <Coroutine test_execute_real_trade_fails_if_user_config_missing>, <Coroutine test_execute_real_trade_fails_if_daily_capital_limit_exceeded>, <Coroutine test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative>, <Coroutine test_execute_real_trade_handles_market_data_error>, <Coroutine test_execute_real_trade_handles_credential_error>, <Coroutine test_execute_real_trade_handles_order_execution_error>, <Coroutine test_execute_real_trade_handles_persistence_error_after_order>, <Coroutine test_execute_real_trade_handles_opportunity_status_update_error>, <Coroutine test_execute_real_trade_handles_config_save_error>, <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>, <Coroutine test_execute_real_trade_handles_oco_order_failure>, <Function test_load_credential_encryption_key_success>, <Function test_load_credential_encryption_key_missing_raises_validation_error>, <Function test_log_level_default>, <Function test_hello_world>]
        pytest_deselected [hook]
            items: [<Coroutine test_get_strategies_performance_endpoint_no_data>, <Coroutine test_get_strategies_performance_endpoint_with_data>, <Coroutine test_get_strategies_performance_endpoint_filter_real_mode>, <Coroutine test_get_strategies_performance_endpoint_multiple_strategies>, <Coroutine test_get_strategies_performance_endpoint_strategy_not_found>, <Coroutine test_get_strategies_performance_endpoint_invalid_mode_parameter>, <Coroutine test_get_strategies_performance_endpoint_no_mode_filter>, <Coroutine test_get_user_config_initial>, <Coroutine test_patch_user_config_update_paper_trading>, <Coroutine test_patch_user_config_only_paper_trading_active>, <Coroutine test_patch_user_config_only_capital>, <Coroutine test_patch_user_config_invalid_data>, <Coroutine test_complete_real_trading_flow_with_capital_management>, <Coroutine test_complete_real_trading_flow_capital_limit_exceeded>, <Coroutine test_complete_real_trading_tsl_monitoring_and_execution>, <Coroutine test_capital_management_daily_reset>, <Coroutine test_start_application_success>, <Coroutine test_get_account_info_success>, <Coroutine test_get_account_info_api_error>, <Coroutine test_get_spot_balances_success>, <Coroutine test_get_spot_balances_parsing_error>, <Coroutine test_make_request_get_success>, <Coroutine test_make_request_retry_on_5xx_then_success>, <Coroutine test_make_request_fail_after_retries_on_5xx>, <Coroutine test_make_request_client_error_no_retry>, <Coroutine test_get_user_configuration_found>, <Coroutine test_get_user_configuration_not_found>, <Coroutine test_get_user_configuration_db_error>, <Coroutine test_upsert_user_configuration_insert>, <Coroutine test_upsert_user_configuration_update>, <Coroutine test_upsert_user_configuration_db_error>, <Coroutine test_save_credential>, <Function test_encrypt_decrypt_data>, <Function test_decrypt_invalid_token>, <Coroutine test_add_credential>, <Coroutine test_get_credential_success>, <Coroutine test_get_credential_decryption_failure_key>, <Coroutine test_verify_credential_binance_success>, <Coroutine test_verify_credential_binance_api_error>, <Coroutine test_verify_credential_decryption_error>, <Coroutine test_verify_credential_telegram_success>, <Coroutine test_get_binance_connection_status_success>, <Coroutine test_get_binance_connection_status_no_credentials>, <Coroutine test_get_binance_connection_status_verification_failed>, <Coroutine test_get_binance_connection_status_credential_error>, <Coroutine test_get_binance_connection_status_binance_api_error>, <Coroutine test_get_binance_spot_balances_success>, <Coroutine test_get_binance_spot_balances_credential_not_found>, <Coroutine test_get_binance_spot_balances_api_error>, <Coroutine test_get_all_strategies_performance_no_trades>, <Coroutine test_get_all_strategies_performance_no_closed_trades>, <Coroutine test_get_all_strategies_performance_with_closed_trades>, <Coroutine test_get_all_strategies_performance_multiple_trades_mixed_pnl>, <Coroutine test_get_all_strategies_performance_mode_filtering_real>, <Coroutine test_get_all_strategies_performance_unknown_strategy>, <Coroutine test_get_all_strategies_performance_multiple_strategies_different_modes>, <Coroutine test_get_all_strategies_performance_breakeven_trades>, <Coroutine test_get_all_strategies_performance_trade_with_none_strategy_id>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl0-0.0-No trades, win rate 0%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl1-100.0-All winning trades, win rate 100%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl2-0.0-All losing trades, win rate 0%]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl3-expected_win_rate3-Mixed with one breakeven, win rate 50% of non-breakeven]>, <Coroutine test_get_all_strategies_performance_win_rate_edge_cases[trades_pnl4-0.0-All breakeven trades, win rate 0%]>, <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>, <Coroutine test_execute_real_trade_sets_tsl_tp_from_defaults_if_not_in_config>, <Coroutine test_monitor_real_trade_adjusts_tsl_for_buy_trade_favorably>, <Coroutine test_monitor_real_trade_adjusts_tsl_for_sell_trade_favorably>, <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_buy_trade_unfavorably>, <Coroutine test_monitor_real_trade_does_not_adjust_tsl_for_sell_trade_unfavorably>, <Coroutine test_monitor_real_trade_detects_tp_hit_for_buy_trade>, <Coroutine test_monitor_real_trade_detects_tp_hit_for_sell_trade>, <Coroutine test_monitor_real_trade_detects_tsl_hit_for_buy_trade>, <Coroutine test_monitor_real_trade_detects_tsl_hit_for_sell_trade>, <Coroutine test_monitor_real_trade_handles_no_tsl_configured>, <Coroutine test_monitor_real_trade_handles_market_data_service_failure>, <Coroutine test_close_real_trade_successful_execution>, <Coroutine test_close_real_trade_handles_credential_error>, <Coroutine test_close_real_trade_handles_order_execution_error>, <Coroutine test_close_real_trade_handles_persistence_error>, <Coroutine test_close_real_trade_handles_portfolio_update_error>, <Coroutine test_close_real_trade_handles_notification_error>, <Coroutine test_execute_real_trade_fails_if_opportunity_not_pending_confirmation>, <Coroutine test_execute_real_trade_fails_if_user_config_missing>, <Coroutine test_execute_real_trade_fails_if_daily_capital_limit_exceeded>, <Coroutine test_execute_real_trade_fails_if_capital_to_invest_is_zero_or_negative>, <Coroutine test_execute_real_trade_handles_market_data_error>, <Coroutine test_execute_real_trade_handles_credential_error>, <Coroutine test_execute_real_trade_handles_order_execution_error>, <Coroutine test_execute_real_trade_handles_persistence_error_after_order>, <Coroutine test_execute_real_trade_handles_opportunity_status_update_error>, <Coroutine test_execute_real_trade_handles_config_save_error>, <Coroutine test_execute_real_trade_sets_tsl_tp_from_user_config>, <Coroutine test_execute_real_trade_handles_oco_order_failure>, <Function test_load_credential_encryption_key_success>, <Function test_load_credential_encryption_key_missing_raises_validation_error>, <Function test_log_level_default>, <Function test_hello_world>]
        finish pytest_deselected --> [] [hook]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x000001F986AED450>
            items: []
            start_path: C:\Users\zamor\UltiBotInversiones
            startdir: C:\Users\zamor\UltiBotInversiones
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PendingDeprecationWarning('Please use `import python_multipart` instead.'), category : 'PendingDeprecationWarning', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\starlette\\formparsers.py', lineno : 12, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 110, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 117, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 132, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 139, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 220, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 292, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 355, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 362, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 532, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 539, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\trading_strategy_models.py', lineno : 599, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\user_configuration_models.py', lineno : 180, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\user_configuration_models.py', lineno : 393, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\user_configuration_models.py', lineno : 404, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\core\\domain_models\\user_configuration_models.py', lineno : 415, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('`json_encoders` is deprecated. See https://docs.pydantic.dev/2.11/concepts/serialization/#custom-serializers for alternatives'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_generate_schema.py', lineno : 298, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\src\\ultibot_backend\\api\\v1\\models\\strategy_models.py', lineno : 238, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : PydanticDeprecatedSince20('Support for class-based `config` is deprecated, use ConfigDict instead.'), category : 'PydanticDeprecatedSince20', filename : 'C:\\Users\\zamor\\UltiBotInversiones\\.venv\\Lib\\site-packages\\pydantic\\_internal\\_config.py', lineno : 323, line : None}
          nodeid: 
          when: collect
          location: None
      finish pytest_warning_recorded --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session  exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session  exitstatus=<ExitCode.NO_TESTS_COLLECTED: 5> testsfailed=0 testscollected=0>
        exitstatus: 5
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x000001F98AE56F10>
          exitstatus: 5
          config: <_pytest.config.Config object at 0x000001F986AED450>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x000001F986AED450>
    finish pytest_unconfigure --> [] [hook]
