#!/usr/bin/env python3
"""
Script de validaci√≥n para el AI Orchestrator Service de UltiBotInversiones.
Verifica la configuraci√≥n b√°sica y conexi√≥n con Gemini API.
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# A√±adir el directorio ra√≠z del proyecto al path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.ultibot_backend.app_config import get_app_settings
from src.ultibot_backend.services.ai_orchestrator_service import AIOrchestratorService

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """Verifica que las variables de entorno necesarias est√©n configuradas."""
    logger.info("üîç Verificando variables de entorno...")
    
    required_vars = [
        'GEMINI_API_KEY',
        'SUPABASE_URL',
        'SUPABASE_ANON_KEY',
        'CREDENTIAL_ENCRYPTION_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not os.getenv(var):
            missing_vars.append(var)
        else:
            logger.info(f"‚úÖ {var}: Configurada")
    
    if missing_vars:
        logger.error(f"‚ùå Variables faltantes: {missing_vars}")
        return False
    
    logger.info("‚úÖ Todas las variables de entorno requeridas est√°n configuradas")
    return True

def test_app_settings():
    """Verifica que AppSettings pueda cargar la configuraci√≥n."""
    logger.info("üîç Probando carga de configuraci√≥n...")
    
    try:
        app_settings = get_app_settings()
        
        # Verificar campos cr√≠ticos
        if not app_settings.gemini_api_key:
            logger.error("‚ùå GEMINI_API_KEY no est√° disponible en AppSettings")
            return False, None
            
        if not app_settings.supabase_url:
            logger.error("‚ùå SUPABASE_URL no est√° disponible en AppSettings")
            return False, None
            
        logger.info(f"‚úÖ Configuraci√≥n cargada correctamente")
        logger.info(f"   - Gemini API Key: {'*' * (len(app_settings.gemini_api_key) - 4) + app_settings.gemini_api_key[-4:]}")
        logger.info(f"   - Supabase URL: {app_settings.supabase_url}")
        logger.info(f"   - Fixed User ID: {app_settings.fixed_user_id}")
        
        return True, app_settings
        
    except Exception as e:
        logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
        return False, None

def test_ai_orchestrator_initialization(settings):
    """Verifica que el AI Orchestrator se pueda inicializar."""
    logger.info("üîç Probando inicializaci√≥n del AI Orchestrator...")
    
    try:
        orchestrator = AIOrchestratorService(settings)
        
        if orchestrator.llm is None:
            logger.error("‚ùå LLM no se inicializ√≥ correctamente")
            return False, None
            
        if orchestrator.parser is None:
            logger.error("‚ùå Parser no se inicializ√≥ correctamente")
            return False, None
            
        if orchestrator.prompt_template is None:
            logger.error("‚ùå Prompt template no se inicializ√≥ correctamente")
            return False, None
            
        logger.info("‚úÖ AI Orchestrator inicializado correctamente")
        logger.info(f"   - Modelo LLM: {orchestrator.llm.model}")
        logger.info(f"   - Temperatura: {orchestrator.llm.temperature}")
        
        return True, orchestrator
        
    except Exception as e:
        logger.error(f"‚ùå Error inicializando AI Orchestrator: {e}")
        return False, None

async def test_basic_ai_analysis(orchestrator):
    """Prueba b√°sica de an√°lisis con el AI Orchestrator."""
    logger.info("üîç Probando an√°lisis b√°sico de IA...")
    
    # Datos de prueba
    strategy_context = """
    Estrategia: Scalping en BTC/USDT
    Par√°metros: 
    - Stop Loss: 1%
    - Take Profit: 2%
    - Timeframe: 1m
    """
    
    opportunity_context = """
    Par: BTC/USDT
    Precio actual: $43,250.00
    Cambio 24h: +2.45%
    Volumen 24h: 15,240 BTC
    RSI: 58.2
    """
    
    historical_context = """
    √öltimas 5 operaciones:
    1. COMPRA a $42,800 - √âXITO (+1.8%)
    2. VENTA a $43,100 - √âXITO (+1.2%)
    3. COMPRA a $42,950 - P√âRDIDA (-0.8%)
    4. VENTA a $43,200 - √âXITO (+1.5%)
    5. COMPRA a $43,000 - √âXITO (+2.1%)
    Win Rate: 80%
    """
    
    tool_outputs = """
    Binance API: Datos de mercado actualizados
    Mobula API: BTC trending positivamente (+15% en b√∫squedas)
    An√°lisis t√©cnico: Tendencia alcista de corto plazo
    """
    
    try:
        logger.info("üì§ Enviando solicitud de an√°lisis a Gemini...")
        
        response = await orchestrator.analyze_opportunity_with_strategy_context_async(
            strategy_context=strategy_context,
            opportunity_context=opportunity_context,
            historical_context=historical_context,
            tool_outputs=tool_outputs
        )
        
        logger.info("‚úÖ An√°lisis completado exitosamente!")
        logger.info(f"üìä Respuesta de IA:")
        logger.info(f"   - Contenido: {response.content[:200]}...")
        
        if response.metadata:
            logger.info(f"   - Metadata: {response.metadata}")
            
        if response.error:
            logger.warning(f"   - Error reportado: {response.error}")
        
        return True, response
        
    except Exception as e:
        logger.error(f"‚ùå Error en an√°lisis de IA: {e}")
        return False, None

async def run_validation_tests():
    """Ejecuta todos los tests de validaci√≥n."""
    logger.info("üöÄ Iniciando validaci√≥n del AI Orchestrator...")
    logger.info("=" * 60)
    
    # Test 1: Variables de entorno
    if not check_environment_variables():
        logger.error("üí• Fallo en verificaci√≥n de variables de entorno")
        return False
    
    logger.info("\n" + "=" * 60)
    
    # Test 2: Configuraci√≥n de la aplicaci√≥n
    config_ok, app_settings = test_app_settings()
    if not config_ok:
        logger.error("üí• Fallo en carga de configuraci√≥n")
        return False
    
    logger.info("\n" + "=" * 60)
    
    # Test 3: Inicializaci√≥n del orchestrator
    init_ok, orchestrator = test_ai_orchestrator_initialization(app_settings)
    if not init_ok:
        logger.error("üí• Fallo en inicializaci√≥n del AI Orchestrator")
        return False
    
    logger.info("\n" + "=" * 60)
    
    # Test 4: An√°lisis b√°sico
    analysis_ok, response = await test_basic_ai_analysis(orchestrator)
    if not analysis_ok:
        logger.error("üí• Fallo en an√°lisis b√°sico de IA")
        return False
    
    logger.info("\n" + "=" * 60)
    logger.info("üéâ ¬°TODOS LOS TESTS PASARON EXITOSAMENTE!")
    logger.info("‚úÖ El AI Orchestrator est√° correctamente configurado y funcionando")
    logger.info("üöÄ Listo para dar consejos de trading e inversiones")
    
    return True

def main():
    """Funci√≥n principal."""
    try:
        # Ejecutar tests asincr√≥nicos
        success = asyncio.run(run_validation_tests())
        
        if success:
            logger.info("\nüéØ RESULTADO: AI Orchestrator ACTIVADO y FUNCIONAL")
            sys.exit(0)
        else:
            logger.error("\nüí• RESULTADO: Fallo en activaci√≥n del AI Orchestrator")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  Test interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        logger.error(f"\nüí• Error inesperado: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
