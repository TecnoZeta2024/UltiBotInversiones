#!/usr/bin/env python3
"""
Script de prueba para verificar la integraci√≥n completa del Sistema de Configuraci√≥n Avanzada
en la ventana principal de UltiBotInversiones.

Este script valida:
1. Importaciones correctas de todos los di√°logos
2. Compilaci√≥n sin errores de sintaxis
3. Instanciaci√≥n correcta de componentes principales
"""

import sys
import os
import asyncio
from pathlib import Path
from uuid import UUID, uuid4

# Agregar el directorio ra√≠z al PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_imports():
    """Prueba que todas las importaciones necesarias funcionen correctamente."""
    print("üîç Probando importaciones...")
    
    try:
        # Importar main window con todas las dependencias
        from src.ultibot_ui.windows.main_window import MainWindow
        print("‚úÖ MainWindow importado correctamente")
        
        # Importar di√°logos de configuraci√≥n avanzada
        from src.ultibot_ui.dialogs.market_scan_config_dialog import MarketScanConfigDialog
        from src.ultibot_ui.dialogs.preset_management_dialog import PresetManagementDialog
        from src.ultibot_ui.dialogs.asset_config_dialog import AssetTradingParametersDialog
        print("‚úÖ Di√°logos de configuraci√≥n avanzada importados correctamente")
        
        # Importar widgets especializados
        from src.ultibot_ui.widgets.market_filter_widgets import (
            PriceRangeWidget, PercentageChangeWidget, VolumeFilterWidget,
            MarketCapRangeWidget, TechnicalAnalysisWidget, TrendDirectionWidget,
            ExclusionCriteriaWidget, ConfidenceThresholdsWidget
        )
        from src.ultibot_ui.widgets.preset_selector_widget import (
            PresetSelectorWidget, ScanResultsWidget, PresetQuickActionWidget, PresetScannerWidget
        )
        print("‚úÖ Widgets especializados importados correctamente")
        
        # Importar API client y dependencias
        from src.ultibot_ui.services.api_client import UltiBotAPIClient
        from src.ultibot_ui.services.trading_mode_state import TradingModeStateManager
        print("‚úÖ Servicios y dependencias importados correctamente")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error de importaci√≥n: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error inesperado en importaciones: {e}")
        return False

def test_compilation():
    """Prueba que todos los archivos principales se compilen sin errores."""
    print("\nüîç Probando compilaci√≥n de archivos...")
    
    files_to_test = [
        "src/ultibot_ui/windows/main_window.py",
        "src/ultibot_ui/dialogs/market_scan_config_dialog.py",
        "src/ultibot_ui/dialogs/preset_management_dialog.py", 
        "src/ultibot_ui/dialogs/asset_config_dialog.py",
        "src/ultibot_ui/widgets/market_filter_widgets.py",
        "src/ultibot_ui/widgets/preset_selector_widget.py"
    ]
    
    all_compiled = True
    
    for file_path in files_to_test:
        try:
            full_path = project_root / file_path
            if full_path.exists():
                import py_compile
                py_compile.compile(str(full_path), doraise=True)
                print(f"‚úÖ {file_path} compilado correctamente")
            else:
                print(f"‚ö†Ô∏è  {file_path} no encontrado")
                all_compiled = False
        except py_compile.PyCompileError as e:
            print(f"‚ùå Error de compilaci√≥n en {file_path}: {e}")
            all_compiled = False
        except Exception as e:
            print(f"‚ùå Error inesperado compilando {file_path}: {e}")
            all_compiled = False
    
    return all_compiled

def test_dialog_instantiation():
    """Prueba que los di√°logos se puedan instanciar correctamente (sin mostrar)."""
    print("\nüîç Probando instanciaci√≥n de di√°logos...")
    
    try:
        # Importar Qt
        from PyQt5.QtWidgets import QApplication
        import sys
        
        # Crear aplicaci√≥n Qt si no existe
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)
        
        # Mock API Client b√°sico
        class MockAPIClient:
            def __init__(self):
                pass
                
        # Mock loop asyncio
        loop = asyncio.new_event_loop()
        
        # Probar instanciaci√≥n de di√°logos (sin mostrar)
        from src.ultibot_ui.dialogs.market_scan_config_dialog import MarketScanConfigDialog
        from src.ultibot_ui.dialogs.preset_management_dialog import PresetManagementDialog
        from src.ultibot_ui.dialogs.asset_config_dialog import AssetTradingParametersDialog
        
        api_client = MockAPIClient()
        
        # Instanciar cada di√°logo
        market_dialog = MarketScanConfigDialog(api_client=api_client, loop=loop, parent=None)
        print("‚úÖ MarketScanConfigDialog instanciado correctamente")
        
        preset_dialog = PresetManagementDialog(api_client=api_client, loop=loop, parent=None)
        print("‚úÖ PresetManagementDialog instanciado correctamente")
        
        asset_dialog = AssetTradingParametersDialog(api_client=api_client, loop=loop, parent=None)
        print("‚úÖ AssetTradingParametersDialog instanciado correctamente")
        
        # Limpiar
        market_dialog.deleteLater()
        preset_dialog.deleteLater()
        asset_dialog.deleteLater()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en instanciaci√≥n de di√°logos: {e}")
        return False

def test_menu_integration():
    """Prueba que los m√©todos de integraci√≥n del men√∫ existan y sean accesibles."""
    print("\nüîç Probando integraci√≥n de men√∫s...")
    
    try:
        from src.ultibot_ui.windows.main_window import MainWindow
        
        # Verificar que los m√©todos requeridos existen
        required_methods = [
            'open_market_scan_config',
            'open_preset_management', 
            'open_asset_trading_parameters',
            '_show_about_dialog'
        ]
        
        for method_name in required_methods:
            if hasattr(MainWindow, method_name):
                print(f"‚úÖ M√©todo {method_name} encontrado en MainWindow")
            else:
                print(f"‚ùå M√©todo {method_name} NO encontrado en MainWindow")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error verificando integraci√≥n de men√∫s: {e}")
        return False

def main():
    """Funci√≥n principal de prueba."""
    print("üöÄ Iniciando pruebas de integraci√≥n del Sistema de Configuraci√≥n Avanzada")
    print("=" * 80)
    
    tests = [
        ("Importaciones", test_imports),
        ("Compilaci√≥n", test_compilation), 
        ("Instanciaci√≥n de Di√°logos", test_dialog_instantiation),
        ("Integraci√≥n de Men√∫s", test_menu_integration)
    ]
    
    all_passed = True
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã Ejecutando prueba: {test_name}")
        print("-" * 50)
        
        try:
            result = test_func()
            results.append((test_name, result))
            if not result:
                all_passed = False
        except Exception as e:
            print(f"‚ùå Error ejecutando prueba {test_name}: {e}")
            results.append((test_name, False))
            all_passed = False
    
    # Resumen final
    print("\n" + "=" * 80)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 80)
    
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:<30} {status}")
    
    print("-" * 80)
    if all_passed:
        print("üéâ TODAS LAS PRUEBAS PASARON - Sistema de Configuraci√≥n Avanzada integrado correctamente")
        print("üöÄ Ready for production deployment!")
    else:
        print("‚ö†Ô∏è  ALGUNAS PRUEBAS FALLARON - Revisar errores arriba")
    
    print("=" * 80)
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
